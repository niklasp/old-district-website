{"version":3,"file":"js/app.515319e1.js","mappings":"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","sources":["webpack://the-district-vr/webpack/runtime/chunk loaded","webpack://the-district-vr/./src/shaders/vertexShader.glsl","webpack://the-district-vr/./src/shaders/tdvr.glsl","webpack://the-district-vr/./src/shaders/floorFragmentShader.glsl","webpack://the-district-vr/./src/scripts/util.js","webpack://the-district-vr/./src/shaders/TDVRShader.js","webpack://the-district-vr/./src/models/club/reduce.glb","webpack://the-district-vr/./src/scripts/district3d.js","webpack://the-district-vr/./src/scripts/districtvr.js","webpack://the-district-vr/./src/scripts/index.js","webpack://the-district-vr/./src/shaders/screenFragmentShader.glsl","webpack://the-district-vr/./src/shaders/followMouseShader.glsl","webpack://the-district-vr/webpack/bootstrap","webpack://the-district-vr/webpack/runtime/compat get default export","webpack://the-district-vr/webpack/runtime/define property getters","webpack://the-district-vr/webpack/runtime/global","webpack://the-district-vr/webpack/runtime/hasOwnProperty shorthand","webpack://the-district-vr/webpack/runtime/make namespace object","webpack://the-district-vr/webpack/runtime/publicPath","webpack://the-district-vr/webpack/runtime/jsonp chunk loading","webpack://the-district-vr/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","module.exports = \"varying vec2 vUv;\\nvarying vec3 vNormal;\\nuniform sampler2D tAudioData;\\nuniform float u_time;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec3 newPosition = position;\\n  float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\\n  // float g = texture2D( tAudioData, vec2( vUv.y, 1.0 ) ).y;\\n  newPosition.x = position.x;\\n  newPosition.y = position.y;\\n\\n  vNormal = normal;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\\n  // gl_Position = vec4( position, 1.0 );\\n}\"","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vUv; \\nuniform sampler2D tDiffuse;\\n// uniform sampler2D tDiffuse;\\nvarying vec2 vUv2;\\nuniform float fade;\\nuniform float gamma;\\nuniform float dattime;\\n\\nuniform bool postfilm;\\nuniform bool postcolor;\\n\\n// #ifndef OPTI\\n// #endif\\n\\nuniform float vignamount;\\nuniform float vignfalloff;\\n\\n#define GammaCorrection(color, gamma) pow( color, 1.0 / vec3(gamma))\\n#define LevelsControlInputRange(color, minInput, maxInput)  min(max(color - vec3(minInput), 0.0) / (vec3(maxInput) - vec3(minInput)), 1.0)\\n#define LevelsControlInput(color, minInput, gamma, maxInput) GammaCorrection(LevelsControlInputRange(color, minInput, maxInput), gamma)\\n#define LevelsControlOutputRange(color, minOutput, maxOutput)  mix(vec3(minOutput), vec3(maxOutput), color)\\n#define LevelsControl(color, minInput, gamma, maxInput, minOutput, maxOutput)   LevelsControlOutputRange(LevelsControlInput(color, minInput, gamma, maxInput), minOutput, maxOutput)\\n\\n#define smoothness 0.4\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n        + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nfloat rand(vec2 co)\\n{\\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\\n}\\n\\nfloat when_eq(float x, float y) {\\n  return 1.0 - abs(sign(x - y));\\n}\\n\\nvec4 getGlitch(sampler2D inTex, float noise, float xpos){\\n\\n    vec4 final = texture2D(inTex, vec2(xpos, vUv.y));\\n\\n    final.rgb = mix(final.rgb, vec3(rand(vec2(vUv.y * dattime))), noise * 0.3).rgb;\\n    \\n        // Apply a line pattern every 4 pixels\\n    final.rgb *= mix(1.0 - (0.15 * noise), 1.0, when_eq(floor(mod(vUv.y * 0.5, 1.0)), 0.0) );\\n    \\n    // Shift green/blue channels (using the red channel)\\n    final.g = mix(final.g, texture2D(inTex, vec2(xpos + noise * 0.05, vUv.y)).g, 1.0);\\n    final.b = mix(final.b, texture2D(inTex, vec2(xpos - noise * 0.05, vUv.y)).b, 1.0);\\n\\n    // float rr=  texture2D(inTex, vUv + vec2(-noise * 0.1, 0.0)).r;\\n\\n    return mix(final,  texture2D(inTex, vUv + vec2(-noise * 0.1, 0.0)), 0.2);\\n}\\n\\nvec3 scanline(vec2 coord, vec3 screen){\\n    const float scale = 0.001;\\n    const float amt = 0.035;// intensity of effect\\n    const float spd = 2.0;//speed of scrolling rows transposed per second\\n    \\n    screen.rgb += sin((coord.y / scale - (dattime * spd * 6.28))) * amt;\\n    return screen;\\n}\\n\\nvoid main() { \\n\\n        // Create large, incidental noise waves\\n    float noise = max(0.0, snoise(vec2(dattime, vUv.y * 0.3)) - 0.3) * (1.42857);\\n    \\n    // Offset by smaller, constant noise waves\\n    noise = noise + (snoise(vec2(dattime*10.0, vUv.y * 2.4)) - 0.5) * 0.15;\\n        \\n        // noise *=  smoothstep(0.5, 1.0, ((sin(dattime) * 0.5) + 1.0)) * 0.5;\\n    noise *=  max(1.0 - dattime * 0.5, 0.0);\\n\\n    vec4 base = vec4(1.0);\\n    if(noise == 0.0 || ! postcolor ){\\n        base = texture2D(tDiffuse, vUv);\\n    }\\n    else {\\n\\n        // Apply the noise as x displacement for every line\\n        float xpos = vUv.x - (noise * noise * 0.035);\\n        base = getGlitch(tDiffuse, noise, xpos);\\n    }\\n   \\n    // vec4 base         = texture2D(tDiffuse, vUv);\\n    \\n    vec4 blend        = texture2D(tDiffuse, vUv);\\n\\n    vec4 final        = (1.0 - ((1.0 - base) * (1.0 - blend)));\\n\\n    float dist        = distance(vUv2, vec2(0.5));\\n\\n    // final.rgb       =  LevelsControl(final.rgb, 0.0, gamma, 1.0, 0.0, 0.9);\\n\\n    final.rgb        *= smoothstep(0.8, vignfalloff * 0.799, dist * (vignamount + vignfalloff));\\n\\n    if ( postfilm ) {\\n      final.rgb = scanline(vUv, final.rgb);\\n    }\\n\\n    gl_FragColor      = final;\\n\\n}\"","module.exports = \"uniform vec2 u_resolution;  // Canvas size (width,height)\\nuniform vec2 u_mouse;       // mouse position in screen pixels\\nuniform float u_time;       // Time in seconds since load\\nuniform sampler2D u_image;\\nuniform sampler2D tAudioData;\\nuniform sampler2D u_video;\\nuniform bool videox;\\nuniform bool globalvideo;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nfloat rand(vec2 n) { \\n\\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\n\\nfloat noise(vec2 p){\\n\\tvec2 ip = floor(p);\\n\\tvec2 u = fract(p);\\n\\tu = u*u*(3.0-2.0*u);\\n\\t\\n\\tfloat res = mix(\\n\\t\\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\\n\\t\\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\\n    \\n\\treturn res*res;\\n}\\n\\nfloat fbm( vec2 coord ) {\\n  int OCTAVES = 1;\\n  float value = 0.0;\\n  float scale = 0.1;\\n\\n  for (int i=0;i< OCTAVES;i++) {\\n    value += noise( coord ) * scale;\\n    coord *= 2.0;\\n  }\\n\\n  return value;\\n}\\n\\nvoid main() {\\n\\n\\tvec4 video = texture2D( u_video, ( vUv + vec2(0., 0.19) ) * vec2(1.0, 1.2) );\\n\\tvec2 s = u_resolution; // Screen\\n\\tvec2 i = vec2(853,480); // Image\\n\\tfloat rs = s.x / s.y;\\n\\tfloat ri = i.x / i.y;\\n\\tvec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n\\tvec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n\\tvec2 nUv = video.xy * s / new + offset;\\n\\n\\t// 1 nice effect ?\\n\\tif ( videox ) {\\n\\t\\tvideo = texture2D( u_video, nUv - u_mouse * 0.7 + 0.2 );\\n\\t}\\n\\n\\tif ( globalvideo ) {\\n\\t\\tnUv = gl_FragCoord.xy / u_resolution;\\n\\t\\tnUv.y = 1. - nUv.y;\\n\\n\\t\\tvec2 coord = nUv * 1.8;\\n\\t\\tvec2 motion = vec2( fbm(coord + vec2(u_time * 1.0, u_time * -2.0 ) ) );\\n\\t\\tfloat final = fbm( coord + motion );\\n\\n\\t\\tvideo = texture2D( u_video, nUv * final );\\n\\t}\\n\\n\\t// 2 global position\\n\\t// nUv = gl_FragCoord.xy / u_resolution;\\n\\t// video = texture2D( u_video, nUv - u_mouse );\\n\\n\\t// vec2 nUv = distanceUV * multiplier + 0.5;\\n\\tgl_FragColor = vec4(0.0157, 0.0078, 0.0392, 1.0) + video * 0.05;\\n}\\n\\n// working example\\n// void main() {\\n// \\tvec2 nUv = vUv * 3./2.;\\n// \\tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n// \\tvec3 color = vec3( 1.0, 1.0, 0.0 );\\n// \\tfloat f = texture2D( tAudioData, vec2( nUv.x, 0.0 ) ).r;\\n// \\tfloat i = step( nUv.y, f ) * step( f - 0.0125, nUv.y );\\n\\n// // \\t// convert frequency to colors\\n// \\tvec3 col = vec3( 0., 4.0*f*(1.0-f), 1.0-f ) * f;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 - smoothstep( 0.0, 0.15, nUv.y );\\n\\n// \\tgl_FragColor = vec4( vec3(col), 1.0 );\\n// }\\n\\n// void main() {\\n//   vec2 nUv = vUv - 0.5;\\n//   nUv = ( vUv ) * 0.05;\\n//   vec4 audio = texture2D( tAudioData, nUv );\\n//   vec4 image = texture2D( u_image, vUv + audio.xy);\\n//   float val = audio.x;\\n//   gl_FragColor = image + image * audio;\\n// \\t// image - audio;\\n// }\\n\\n// void main() {\\n// \\tvec2 nUv = vUv - 0.5;\\n// \\tvec4 col = texture2D(tAudioData, nUv);\\n// \\t// float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\\n// \\tgl_FragColor = col;\\n// }\\n\\n// void main() {\\n// \\tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n// \\tvec3 color = vec3( 1.0, 1.0, 0.0 );\\n\\n// \\tfloat f = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\\n\\n// \\tfloat i = step( vUv.y, f ) * step( f - 0.0125, vUv.y );\\n\\n// \\tgl_FragColor = vec4( mix( backgroundColor, color, i ), 1.0 );\\n// \\tgl_FragColor = vec4( f, f, f, 1.0 );\\n// }\\n\\n// void main() {\\n//     // create pixel coordinates\\n// \\tvec2 uv = vUv;\\n\\n//     // the sound texture is 512x2\\n//   int tx = int(uv.x*512.0);\\n    \\n// \\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\\n// \\tfloat fft = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\\n\\n//   // second row is the sound wave, one texel is one mono sample\\n//   float wave = texture2D( tAudioData, vec2( vUv.y, 0.0 ) ).x;\\n\\t\\n// \\t// convert frequency to colors\\n// \\tvec3 col = vec3( 0., 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 - smoothstep( 0.0, 0.15, abs(wave - uv.y) );\\n\\t\\n// \\t// output final color\\n// \\tgl_FragColor = vec4(col,1.0);\\n// }\\n\\n// void main() {\\n//   vec2 nUv = vec2( vUv - 0.5 );\\n//   vec2 vUvMouse = vec2( vUv.x - u_mouse.x, vUv.y - u_mouse.y);\\n//   vec2 dxy = pixelSize * 2./ resolution;\\n//   float circle = smoothstep(\\n//     0.1,\\n//     1.,\\n//     dot(nUv, nUv) * 4.\\n//   );\\n//   vec2 pixelated = (dxy * floor( vUv / dxy ) );\\n\\n//   //around mouse\\n//   vec2 mouseUv = nUv;\\n//   mouseUv += ( pixelated - 0.5 ) * ( distance( u_mouse, mouseUv + 0.5) * 1.) * length(u_mouseSpeed) * 4.;\\n\\n//   //end around mouse\\n\\n\\n//   // gl_FragColor = texture2D(tDiffuse, pixelated - circle);\\n//   // gl_FragColor = texture2D( tDiffuse, vUv + nUv / 4.); // add border effect lines\\n//   // gl_FragColor = texture2D( u_image, vUv + (1. - circle) * mouseUv / 4.); // dont distort center with circle\\n//   gl_FragColor = texture2D( u_image, vUv - nUv * ( u_mouse )); //somehow working\\n//   // gl_FragColor = texture2D( u_image, mouseUv + 0.5); //try to only apply at mouse position\\n//   // gl_FragColor = vec4( circle, length(u_mouseSpeed), circle, 1.0 );\\n// }\\n\\n// void main() {\\n//     // create pixel coordinates\\n// \\tvec2 uv = vUv;\\n\\n// \\t// the sound texture is 512x2\\n// \\tint tx = int(uv.x*512.0);\\n    \\n// \\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\\n// \\tfloat fft  = texelFetch( tAudioData, ivec2(tx,0), 0 ).x; \\n\\n// \\t// second row is the sound wave, one texel is one mono sample\\n// \\tfloat wave = texelFetch( tAudioData, ivec2(tx,1), 0 ).x;\\n\\t\\n// \\t// convert frequency to colors\\n// \\tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\\n\\t\\n// \\t// output final color\\n// \\tgl_FragColor = vec4(col,1.0);\\n// }\\n\\n//\\n// Color version of: https://www.shadertoy.com/view/XlXGDf\\n//\\n// Based on: https://www.shadertoy.com/view/4dfSRS\\n//\\n\\n// #define PI 3.14159\\n\\n// vec4 audioEq() {\\n//     float vol = 0.0;\\n    \\n//     // bass\\n//     float lows = 0.0;\\n//     for(float i=0.;i<85.; i++){\\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\\n//         lows += v*v;\\n//         vol += v*v;\\n//     }\\n//     lows /= 85.0;\\n//     lows = sqrt(lows);\\n    \\n//     // mids\\n//     float mids = 0.0;\\n//     for(float i=85.;i<255.; i++){\\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\\n//         mids += v*v;\\n//         vol += v*v;\\n//     }\\n//     mids /= 170.0;\\n//     mids = sqrt(mids);\\n    \\n//     // treb\\n//     float highs = 0.0;\\n//     for(float i=255.;i<512.; i++){\\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\\n//         highs += v*v;\\n//         vol += v*v;\\n//     }\\n//     highs /= 255.0;\\n//     highs = sqrt(highs);\\n    \\n//     vol /= 512.;\\n//     vol = sqrt(vol);\\n    \\n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\\n// }\\n\\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\\n// {\\n// \\tvec2 uv = fragCoord.xy / iResolution.xy;\\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\\n\\n//     vec4 eq = audioEq();\\n// \\tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\\n// \\tfloat r = length( uv );\\n// \\tfloat a = 0.01 - r;\\n// \\tuv = vec2( theta, r );\\n\\n// \\tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\\n// \\tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\\n//     float y = t1 * t2 * a * 16.9;\\n    \\n// \\tfragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       1.0); \\n// }\\n\\n// uniform vec2 u_resolution;  // Canvas size (width,height)\\n// uniform vec2 u_mouse;       // mouse position in screen pixels\\n// uniform float u_time;       // Time in seconds since load\\n// uniform sampler2D tAudioData;\\n// uniform sampler2D u_image;\\n// uniform vec2 resolution;\\n\\n// varying vec2 vUv;\\n// varying vec3 vNormal;\\n\\n// float squared(float value) {\\n// \\treturn value * value;\\n// }\\n\\n// float getAmp(float frequency) {\\n// \\treturn texture2D(tAudioData, vec2(frequency / 512.0, 0)).x;\\n// }\\n\\n// float getWeight(float f) {\\n// \\treturn (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\\n// }\\n\\n// #define P 3.14159\\n// #define PI 3.14159\\n// #define E .001\\n\\n// #define T .03 // Thickness\\n// #define W 2.  // Width\\n// #define A .29 // Amplitude\\n// #define V 0.5  // Velocity\\n\\n// void main() {\\n  //   gl_FragColor = vec4(vUv, 0.0, 1.0);\\n  // gl_FragColor = vec4(vNormal, 1.0);\\n\\n\\t\\t\\t\\t// vec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n\\t\\t\\t\\t// vec3 color = vec3( 0.5, vvUv.x, vUv.y );\\n\\n\\t\\t\\t\\t// float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\\n        // float g = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).y;\\n\\t\\t\\t\\t// float i = smoothstep( vUv.x, 0.0, f );\\n\\n\\t\\t\\t\\t// gl_FragColor = vec4( mix( backgroundColor, color, f ), 1.0 );\\n  // gl_FragColor = vec4( 0.5 + vUv.x, 0.1, 0.8, 1.0 );\\n\\t// gl_FragColor = texture2D( u_image, vUv + tAudioData);\\n\\t\\t// vec2 uvTrue = gl_gl_FragCoord.xy / 30. / 20.;\\n    // vec2 uv = -1.0 + 2.0 * uvTrue;\\n\\n    // vec2 uv = gl_gl_FragCoord.xy / u_resolution;\\n    // float fft = texture2D( tAudioData, vec2(uv.x * 0.25, 1.)).x;\\n    // gl_FragColor = vec4(uv * pow(fft, 2.0), 0., 1.);\\n\\n\\t\\t// float lineIntensity\\t;\\n    // float glowWidth = 0.1;\\n    // vec3 color = vec3(0.0);\\n\\n\\t\\t// for(float i = 0.0; i < 5.0; i++) {\\n\\t\\t// \\tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\\n\\t\\t// \\tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\\n\\t\\t// \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tglowWidth * (2.0 - sin(u_time * 0.23)),\\n\\t\\t// \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tglowWidth * (2.0 - cos(u_time * 0.19)));\\n\\t\\t// }\\n\\n\\t// for(float i = 0.0; i < 5.0; i++) {\\n        \\n\\t// \\tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\\n  //       float Y = uv.y + getWeight(squared(i) * 20.0) *\\n  //           (texture(tAudioData, vec2(uvTrue.x, 1)).x - 0.5);\\n  //       lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + u_time,2.0) - 1.0));\\n\\t// \\tglowWidth = abs(lineIntensity / (150.0 * Y));\\n\\t// \\tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\\n  //                     glowWidth * (2.0 - sin(u_time * 0.23)),\\n  //                     glowWidth * (2.0 - cos(u_time * 0.19)));\\n\\t// }\\t\\n\\n\\t// gl_FragColor = vec4(color, 1.0);\\n\\n\\t// vec2 c = gl_gl_FragCoord.xy / 600.;\\n\\t// float s = texture(tAudioData, c * .5).r;\\n\\t// c = vec2(0, A*s*sin((c.x*W+u_time*V)* 2.5)) + (c*2.-1.);\\n\\t// float g = max(abs(s/(pow(c.y, 2.1*sin(s*P))))*T,\\n\\t// \\t\\t\\t  abs(.1/(c.y+E)));\\n\\t// gl_FragColor = vec4(g*g*s*.6, g*s*.44, g*g*.7, 1);\\n\\n\\t// vec2 uv = vUv;\\n\\t// uv = abs( 2.0 * ( uv - 0.5 ) );\\n\\n\\t// float theta = 1.0 * ( 1.0 / ( PI / 2.0 ) ) * atan( uv.x, uv.y );\\n\\t// float r = length( uv );\\n\\t// float a = 0.01 - r;\\n\\t// uv = vec2( theta, r );\\n\\n\\t// vec4 t1 = texture2D( tAudioData, vec2( uv[0], 0.9 ) );\\n\\t// vec4 t2 = texture2D( tAudioData, vec2( uv[1], 0.9 ) );\\n\\t// float y = t1[3] * t2[0] * a * 1500.5;\\n\\t// gl_FragColor = vec4( sin( y * PI ), sin( y * PI ), sin( y * PI ), 1.0 );\\n// }\\n\\n// vec2 hash(in vec2 p) \\n// {\\n//     p = vec2( dot(p,vec2(127.1,311.7)),\\n// \\t\\t\\t  dot(p,vec2(299.5,783.3)) );\\n\\n// \\treturn -1.0 + 2.0*fract(sin(p)*43758.545);\\n// }\\n\\n// float noise(in vec2 p) \\n// {\\n//     vec2 p00 = floor(p);\\n//     vec2 p10 = p00 + vec2(1.0, 0.0);\\n//     vec2 p01 = p00 + vec2(0.5, 1.0);\\n//     vec2 p11 = p00 + vec2(1.0, 1.0);\\n    \\n//     vec2 s = p - p00;\\n    \\n//     float a = dot(hash(p00), s);\\n// \\tfloat b = dot(hash(p10), p - p10);\\n// \\tfloat c = dot(hash(p01), p - p01);\\n// \\tfloat d = dot(hash(p11), p - p11);\\n\\n//     vec2 q = s*s*s*(s*(s*6.0 - 15.0) + 10.0);\\n\\n//     float c1 = b - a;\\n//     float c2 = c - a;\\n//     float c3 = d - c - b + a;\\n\\n//    \\treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\\n// }\\n\\n\\n// float fbm(vec2 p) \\n// {\\n// \\tfloat h = noise(p) * texture(tAudioData, vec2(0.0, 0.0)).r;\\n//     h += noise(p * 2.0) * texture(tAudioData, vec2(0.25, 0.0)).r * 0.5;\\n//     h += noise(p * 4.0) * texture(tAudioData, vec2(0.50, 0.0)).r * 0.25;\\n//     h += noise(p * 8.0) * texture(tAudioData, vec2(0.75, 0.0)).r * 0.125;\\n    \\n//     return h;\\n// }\\n\\n// // Taken from http://iquilezles.org/www/articles/palettes/palettes.htm\\n// vec3 ColorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\\n// {\\n//     return a + b*cos( 6.28318*(c*t+d) );\\n// }\\n\\n// vec3 ContourLines(vec2 p) \\n// {\\n// \\tfloat h = fbm(p*5.5)*10.0;\\n//     float t = fract(h);\\n//     float b = 1.0 - fract(h + 1.0);\\n//     return ColorPalette(h*0.1,\\n//                         vec3(1.0), vec3(0.7), vec3(1.0), vec3(0.0, 0.333, 0.666)) * \\n//                (pow(t, 16.0) + pow(b, 4.0));\\n        \\n// }\\n\\n// vec2 Position() \\n// {\\n// \\treturn vec2(noise(vec2(u_time*0.014)), noise(vec2(u_time*0.012))) +\\n//            vec2(0.0, u_time * 0.025);\\n// }\\n\\n// void main()\\n// {\\n//   vec2 p = Position() + (gl_FragCoord.xy / max(u_resolution.x, u_resolution.y));\\n// \\tgl_FragColor = vec4(pow(ContourLines(p), vec3(0.55)), 1.0);\\n// }\\n\\n//\\n// Color version of: https://www.shadertoy.com/view/XlXGDf\\n//\\n// Based on: https://www.shadertoy.com/view/4dfSRS\\n//\\n\\n// #define PI 3.14159\\n\\n// vec4 audioEq() {\\n//     float vol = 0.0;\\n    \\n//     // bass\\n//     float lows = 0.0;\\n//     for(float i=0.;i<85.; i++){\\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\\n//         lows += v*v;\\n//         vol += v*v;\\n//     }\\n//     // lows /= 85.0;\\n//     lows = sqrt(lows) * 10.;\\n    \\n//     // mids\\n//     float mids = 0.0;\\n//     for(float i=85.;i<255.; i++){\\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\\n//         mids += v*v;\\n//         vol += v*v;\\n//     }\\n//     // mids /= 170.0;\\n//     mids = sqrt(mids) * 10.;\\n    \\n//     // treb\\n//     float highs = 0.0;\\n//     for(float i=255.;i<512.; i++){\\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\\n//         highs += v*v;\\n//         vol += v*v;\\n//     }\\n//     // highs /= 255.0;\\n//     highs = sqrt(highs) * 10.;\\n    \\n//     // vol /= 512.;\\n//     vol = sqrt(vol) * 10.;\\n    \\n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\\n// }\\n\\n// void main()\\n// {\\n// \\tvec2 uv = (vUv - 0.5) * 0.3;\\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\\n\\n//     vec4 eq = audioEq();\\n// \\tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\\n// \\tfloat r = length( uv );\\n// \\tfloat a = 0.01 - r;\\n// \\tuv = vec2( theta, r );\\n\\n// \\tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\\n// \\tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\\n//   float y = t1 * t2 * a * 16.9;\\n\\n// \\tgl_FragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       1.0); \\n// }\\n\\n// const int numWaves = 6;\\n// const float numStripes = 1.0;\\n// const float numFreqs = 8.0;\\n// const float meanFreq = 5.0;\\n// const float stdDev = 2.0;\\n// const float period = 5.0;\\n// const float pi = 4.0 * atan(1.0);\\n// const float pi2 = 2.0 * pi;\\n// const float ln2 = log(2.0);\\n// const float mean = meanFreq * .59314718;\\n\\n// float wavething(int n, float x){\\n//     float l = ln2 * float(n) + log(x);\\n//     l -= mean;\\n//     return exp(-l * l / stdDev) / 2.0;\\n// }\\n\\n// void main()\\n// {\\n//     gl_FragColor = vec4(0.0);\\n//     float scale = exp2(-fract(u_time / period));\\n//     float sum1 = 0.0;\\n//     for(int n = 0; n < int(numFreqs); n++){\\n//         sum1 += wavething(n, scale);\\n//     }\\n//     vec2 xy = pi2 * numStripes\\n//         * ((2.0 * gl_FragCoord.xy - u_resolution.xy) / u_resolution.y);\\n    \\n//     float sum2 = 0.0;\\n//     for(int n = 0; n < numWaves; n++){\\n//         float theta = pi * float(n) / float(numWaves);\\n//         vec2 waveVec = vec2(cos(theta), sin(theta));\\n//         float phase = dot(xy, waveVec);\\n//         for(int k = 0; k < int(numFreqs); k++){\\n//             sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\\n//         }\\n//     }\\n//     gl_FragColor += vec4(1.0 - sum2 / sum1);\\n//     xy /= pi2 * numStripes;\\n//     float r = length(xy) * 0.35;\\n//     if(sum2 / sum1 < .5){\\n//         gl_FragColor.x *= 2.0;\\n//         gl_FragColor.y *= texture(tAudioData, vec2(.161616 * r + .161616, .2)).x;\\n//         gl_FragColor.z *= texture(tAudioData, vec2(.161616 * r + .333333, .2)).x;\\n//         gl_FragColor = 1.0 - gl_FragColor;\\n//     }\\n//     // gl_FragColor = 1.0 - (r + 1.0) * gl_FragColor;\\n//     // if(length(gl_FragColor) > 3.0) gl_FragColor = vec4(0.0);\\n// }\\n\\n\"","/**\n * @param {Function} onRatioChange The callback when the scroll ratio changes\n */\n export const monitorScroll = onRatioChange => {\n  const html = document.documentElement;\n  const body = document.body;\n\n  window.addEventListener('scroll', () => {\n    onRatioChange(\n      (html.scrollTop || body.scrollTop)\n      /\n      ((html.scrollHeight || body.scrollHeight) - html.clientHeight)\n    );\n  });\n};\n\nexport const monitorWheel = onWheelChange => {\n  let scrollTarget = 0;\n\n  document.addEventListener( 'wheel', ( e ) => {\n    scrollTarget = e.deltaY / 3.0;\n    onWheelChange( scrollTarget );\n  });\n};\n\nexport class ColorGUIHelper {\n  constructor(object, prop) {\n    this.object = object;\n    this.prop = prop;\n  }\n  get value() {\n    return `#${this.object[this.prop].getHexString()}`;\n  }\n  set value(hexString) {\n    this.object[this.prop].set(hexString);\n  }\n}","/**\n * Full-screen textured quad shader\n */\n\nimport fragmentShader from './tdvr.glsl';\n\nvar TDVRShader = {\n\n\tuniforms: {\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 },\n    'amount': { type: 'f', value: 0.0 },\n    'angle': { type: 'f', value: 0.0 },\n\t\t'dattime': { type: 'f', value: 0.0 },\n\t\t'strength': { type: 'f', value: 0.4 },\n\t\t'radius': { type: 'f', value: .15 },\n\t\t'power': { type: 'f', value: 1 },\n\t\t'threshold': { type: 'f', value: .05 },\n\t\t'smoothWidth': { type: 'f', value: .31 },\n\t\t'gamma': { type: 'f', value: 1 },\n\t\t'vignfalloff': { type: 'f', value: 0.2 },\n\t\t'vignamount': { type: 'f', value: 0.4 },\n\t\tpostcolor: { value: true },\n\t\tpostfilm: { value: true },\n\t\ttInput: {\n\t\t\tvalue: null,\n\t\t}\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vUv2;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}`,\n\n\tfragmentShader,\n\n};\n\nexport { TDVRShader };","export default __webpack_public_path__ + \"src/models/club/reduce.glb\";","import * as THREE from 'three';\n\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\n\nimport GUI from 'lil-gui';\n\nimport { monitorScroll, monitorWheel, ColorGUIHelper } from './util';\nimport screenFragmentShader from '../shaders/screenFragmentShader.glsl';\nimport floorFragmentShader from '../shaders/floorFragmentShader.glsl';\nimport followMouseShader from '../shaders/followMouseShader.glsl';\n\nimport vertexShader from '../shaders/vertexShader.glsl';\nimport { TDVRShader } from '../shaders/TDVRShader.js';\n\nimport club from '../models/club/reduce.glb';\nimport pot from '../../public/POT.png';\n\nimport visuals from '../images/tdvr_teaser_for_web_1_sm.mp4';\nimport logo from '../images/TDVR-Logo-white-glow.png';\n\nexport default class Sketch {\n  constructor( options ) {\n\n    this.loadModels.bind( this );\n    this.loadAudio.bind( this );\n    this.clock = new THREE.Clock();\n    this.time = 0;\n    this.scroll = 0;\n    this.scrollTarget = 0;\n    this.direction = 1;\n    this.scrollPercentage = 0.0;\n    this.screens = [];\n\n    this.appParams = {\n      state: 'start', //playing //paused //no3d\n      exposure: 1.1,\n      bloomStrength: 0.234,\n      bloomThreshold: 0.3,\n      bloomRadius: 0.22,\n      audioLoaded: false,\n      audioPlaying: false,\n      isAppleDevice: /(iPad|iPhone|iPod)/g.test( navigator.userAgent ),\n      ambLight: {\n        color: '#5e68b0',\n        intensity: 2.0,\n      },\n      analyserIndex: 27,\n      analyserIntensity: 241,\n      dirLight1: {\n        color: '#181d5d',\n        intensity: 1.0,\n        position: {\n          x: 0,\n          y: -15.12,\n          z: 20.96,\n        },\n        target: {\n          position: {\n            x: 0,\n            y: -7.8,\n            z: -20.0,\n          }\n        },\n      },\n      dirLight2: {\n        color: '#2d4d74',\n        intensity: 0.15,\n        position: {\n          x: 0,\n          y: 4.28,\n          z: -3.6,\n        },\n        target: {\n          position: {\n            x: 0,\n            y: 1.8,\n            z: 0.32,\n          }\n        },\n      },\n      spotLight1: {\n        color: '#ffffff',\n        intensity: 3.0,\n        distance: 76,\n        penumbra: 0.8,\n        angle: 0.77,\n        position: {\n          x: 0,\n          y: 7.6515,\n          z: -19.851,\n        },\n        target: {\n          position: {\n            x: 0,\n            y: 4.0940,\n            z: -20.60,\n          }\n        },\n      },\n      fx: {\n        smokeCol: [ 0.81,0.84,1.0 ],\n      },\n      video: 2,\n      videox: true,\n      globalvideo: true,\n      is3d: true,\n      directionalLightIntensity: 0.2,\n      envMapIntensity: 0.1,\n      light:{},\n      postglitch: false,\n      postcolor: true,\n      postfilm: true,\n    };\n\n    this.screenUniforms = {};\n\n    this.loadingDiv = document.getElementById( 'loader' );\n\n    this.container = options.dom;\n\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n\n    this.mouse = new THREE.Vector2( 0.0, 0.0 );\n    this.mouseSpeed = new THREE.Vector2( 0.0, 0.0 );\n    this.oldMouseSpeed = new THREE.Vector2( 0.0, 0.0 );\n    this.mouseAcc = new THREE.Vector2( 0.0, 0.0 );\n    this.lMouseSpeed = new THREE.Vector2( 0.0, 0.0 );\n    this.lMouse = new THREE.Vector2( 0.0, 0.0 );\n\n    this.camPos = new THREE.Vector3( 0.0, 0.0, 0.0 );\n    this.pultPos = new THREE.Vector3( 0, 4.8, -22 );\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n    this.mouseTargetX = 0;\n    this.mouseTargetY = 0;\n\n    this.playBackSpeed = 500;\n\n    this.logo = document.querySelector( '.bottom-logo' );\n    this.currentLogo = 1;\n\n    this.nav = document.querySelector( '.navbar-nav' );\n    this.currentMode = 0;\n    this.modes = [ 'normal', 'difference', 'color-dodge' ];\n    this.lerp = 0.1;\n\n    this.time = 0;\n    this.vid = document.querySelector( '#bgvid' );\n\n    this.horizontalContainer = document.querySelector( '.horizontal-container' );\n    this.hciScroll = null;\n    this.faderContainer = document.querySelector( '.fader' );\n    this.faderScroll = null;\n    this.lastScrollPos = 0;\n    this.scrollTarget = 0;\n    this.isScrolling = false;\n\n    this.mouseWX = 10;\n    this.mouseWY = 10;\n    this.mouseTargetWX = 10;\n    this.mouseTargetWY = 10;\n    this.relX = 0;\n    this.relY = 0;\n    this.smoothness = 0.1;\n    this.smoothnessTarget = 0.1;\n\n    this.isOverFogEl = false;\n    this.isOverInteractive = false;\n\n    this.g_containerInViewport = false;\n\n    const fov = 40;\n    const near = 0.01;\n    const far = 70;\n\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera( fov, this.width / this.height, near, far );\n    this.initialCameraPosition = new THREE.Vector3( 0, 7, 26 );\n    this.initialCameraTarget = new THREE.Vector3( 0, 8, 0 );\n\n    let pixelRatio = window.devicePixelRatio;\n    let AA = true;\n    if (pixelRatio > 1) {\n      AA = false;\n    }\n\n    this.renderer = new THREE.WebGLRenderer( {\n      antialias: AA,\n      autoClear: true,\n      powerPreference: \"high-performance\",\n    } );\n\n    this.renderer.setSize( this.width, this.height );\n\n    this.container.appendChild( this.renderer.domElement );\n\n    this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n    this.controls.object.position.set( ...this.initialCameraPosition );\n    this.controls.target = new THREE.Vector3(0,4,-30);\n    this.controls.update();\n\n    this.setupLoading();\n    this.setupListeners();\n    this.loadModels();\n    this.addLights();\n    // this.addGUI();\n    this.addObjects();\n    this.addComposer();\n    this.render();\n    this.resize();\n  }\n\n  setState( newState ) {\n    this.onChageState( newState );\n    this.appParams.state = newState;\n  }\n\n  onChageState( newState ) {\n    switch ( newState ) {\n      case 'start':\n        break;\n      case 'playing':\n        playbutton.classList.toggle( 'out' );\n        document.body.style.position = 'inherit';\n\n        if ( ! this.appParams.audioLoaded ) {\n          this.loadAudio();\n          this.appParams.audioLoaded = true;\n\n          window.scrollTo({\n            top: this.height,\n            behavior: 'smooth'\n          });\n        }\n\n        this.screenMaterial = new THREE.ShaderMaterial({\n          uniforms: this.screenUniforms,\n          vertexShader,\n          fragmentShader: screenFragmentShader,\n        });\n\n        this.screens.forEach( screen => {\n          screen.material = this.screenMaterial;\n          screen.material.needsUpdate = true;\n        });\n\n        [ ...document.querySelectorAll( '.f-in') ].forEach( el => {\n          el.style.opacity = 1;\n        });\n\n        new TWEEN.Tween(this.amblight)\n            .to( {\n              intensity: 1.8\n            }, 1000 )\n            .start();\n\n        playbutton.classList.toggle( 'paused' );\n\n        break;\n      case 'paused':\n        playbutton.classList.toggle( 'paused' );\n        break;\n      case 'no3d':\n        break;\n    }\n  }\n\n  addGUI() {\n    this.gui = new GUI();\n    const that = this;\n    const bloomFolder = this.gui.addFolder( 'Bloom' ).close();\n\n    bloomFolder.add( this.appParams, 'exposure', 0.1, 2 ).onChange( function ( value ) {\n      that.renderer.toneMappingExposure = Math.pow( value, 4.0 );\n    } );\n\n    bloomFolder.add( this.appParams, 'bloomThreshold', 0.0, 1.0 ).onChange( function ( value ) {\n      that.bloomPass.threshold = Number( value );\n    } );\n\n    bloomFolder.add( this.appParams, 'bloomStrength', 0.0, 3.0 ).onChange( function ( value ) {\n      that.bloomPass.strength = Number( value );\n    } );\n\n    bloomFolder.add( this.appParams, 'bloomRadius', 0.0, 1.0 ).step( 0.01 ).onChange( function ( value ) {\n      that.bloomPass.radius = Number( value );\n    } );\n\n    const lightsFolder = this.gui.addFolder( 'Lights' ).close();\n    lightsFolder.add( this.appParams.ambLight, `intensity`, 0.0, 10.0 ).name('ambientintensity').onChange( function ( value ) {\n      that.amblight.intensity = value;\n    } );\n    lightsFolder.addColor( new ColorGUIHelper( this.amblight, 'color'), 'value' ).name( 'Ambient Color');\n\n    const fd1 = lightsFolder.addFolder( 'Directional Light 1' ).close();\n    fd1.addColor( new ColorGUIHelper( this.dirLight1, 'color'), 'value' ).name( 'Color');\n    fd1.add( this.appParams.dirLight1, 'intensity', 0, 1).onChange( value => this.dirLight1.intensity = value );\n    // fd1.add( this.appParams.dirLight1.position, 'x', -20, 20).name( 'd1x' ).onChange( value => this.dirLight1.position.setX( value ) );\n    fd1.add( this.appParams.dirLight1.position, 'y', -40, 40).name( 'y' ).onChange( value => this.dirLight1.position.setY( value ) );\n    fd1.add( this.appParams.dirLight1.position, 'z', -40, 40).name( 'z' ).onChange( value => this.dirLight1.position.setZ( value ) );\n    // fd1.add( this.appParams.dirLight1.target.position, 'x', -20, 20).name( 'd1tx' ).onChange( value => this.dirLight1.target.position.setX( value ) );\n    fd1.add( this.appParams.dirLight1.target.position, 'y', -40, 40).name( 'target y' ).onChange( value => this.dirLight1.target.position.setY( value ) );\n    fd1.add( this.appParams.dirLight1.target.position, 'z', -40, 40).name( 'target z' ).onChange( value => this.dirLight1.target.position.setZ( value ) );\n\n    const fd2 = lightsFolder.addFolder( 'Directional Light 2' ).close();\n    fd2.addColor( new ColorGUIHelper( this.dirLight2, 'color'), 'value' ).name( 'Dir Light 2');\n    fd2.add( this.appParams.dirLight2, 'intensity', 0, 1).onChange( value => this.dirLight2.intensity = value );\n    fd2.add( this.appParams.dirLight2.position, 'x', -20, 20).name( 'x' ).onChange( value => this.dirLight2.position.setX( value ) );\n    fd2.add( this.appParams.dirLight2.position, 'y', -20, 20).name( 'y' ).onChange( value => this.dirLight2.position.setY( value ) );\n    fd2.add( this.appParams.dirLight2.position, 'z', -20, 20).name( 'z' ).onChange( value => this.dirLight2.position.setZ( value ) );\n    fd2.add( this.appParams.dirLight2.target.position, 'x', -20, 20).name( 'target x' ).onChange( value => this.dirLight2.target.position.setX( value ) );\n    fd2.add( this.appParams.dirLight2.target.position, 'y', -20, 20).name( 'target y' ).onChange( value => this.dirLight2.target.position.setY( value ) );\n    fd2.add( this.appParams.dirLight2.target.position, 'z', -20, 20).name( 'target z' ).onChange( value => this.dirLight2.target.position.setZ( value ) );\n\n    const fd3 = lightsFolder.addFolder( 'Spot Light' ).close();\n    fd3.addColor( new ColorGUIHelper( this.spotLight1, 'color'), 'value' ).name( 'Spot Light');\n    fd3.add( this.appParams.spotLight1, 'intensity', 0, 3).onChange( value => this.spotLight1.intensity = value );\n    fd3.add( this.appParams.spotLight1, 'distance', 0, 100).onChange( value => this.spotLight1.distance = value );\n    fd3.add( this.appParams.spotLight1, 'penumbra', 0, 1).onChange( value => this.spotLight1.penumbra = value );\n    fd3.add( this.appParams.spotLight1, 'angle', 0, Math.PI * 2).onChange( value => this.spotLight1.angle = value );\n    fd3.add( this.appParams.spotLight1.position, 'x', -25, 20).name( 'x' ).onChange( value => this.spotLight1.position.setX( value ) );\n    fd3.add( this.appParams.spotLight1.position, 'y', -25, 20).name( 'y' ).onChange( value => this.spotLight1.position.setY( value ) );\n    fd3.add( this.appParams.spotLight1.position, 'z', -25, 20).name( 'z' ).onChange( value => this.spotLight1.position.setZ( value ) );\n    fd3.add( this.appParams.spotLight1.target.position, 'x', -25, 20).name( 'target x' ).onChange( value => this.spotLight1.target.position.setX( value ) );\n    fd3.add( this.appParams.spotLight1.target.position, 'y', -25, 20).name( 'target y' ).onChange( value => this.spotLight1.target.position.setY( value ) );\n    fd3.add( this.appParams.spotLight1.target.position, 'z', -25, 20).name( 'target z' ).onChange( value => this.spotLight1.target.position.setZ( value ) );\n    fd3.add( this.appParams, 'analyserIndex', 0, 254).step( 1 ).name( 'beat index' ).onChange( value => this.appParams.analyserIndex = value );\n    fd3.add( this.appParams, 'analyserIntensity', 0, 1000).step( 1 ).name( 'beat intensity' ).onChange( value => this.appParams.analyserIntensity = value );\n\n    const videoFolder = this.gui.addFolder( 'Video' ).close();\n    videoFolder.add( this.appParams, 'is3d' ).onChange( val => {\n      if ( val ) {\n        this.container.style.display = 'block';\n      } else {\n        this.container.style.display = 'none';\n      }\n    });\n    videoFolder.add( this.appParams, 'videox' ).onChange( val => {\n      this.screenUniforms.videox.value = val;\n    });\n    videoFolder.add( this.appParams, 'globalvideo' ).onChange( val => {\n      this.screenUniforms.globalvideo.value = val;\n    });\n\n    const postFolder = this.gui.addFolder( 'Postprocessing' ).close();\n    postFolder.add( this.appParams, 'postcolor' ).name( 'Colorstorm' ).onChange( value => {\n      this.tdvrPass.uniforms.postcolor.value = value;\n    });\n    postFolder.add( this.appParams, 'postfilm' ).name( 'Film' ).onChange( value => {\n      this.tdvrPass.uniforms.postfilm.value = value;\n    });\n\n    const fxFolder = this.gui.addFolder( 'fx' );\n    fxFolder.addColor( this.appParams.fx, 'smokeCol' ).name( 'Smoke Color' ).onChange( value => {\n      this.followMousePass.uniforms.newCol.value = value;\n    });\n\n    this.gui.close();\n  }\n\n  setupLoading() {\n    const that = this;\n    this.loadingManager = new THREE.LoadingManager();\n    this.loadingManager.onStart = function ( url, itemsLoaded, itemsTotal ) {\n      // console.log( 'Started loading file: ' + url + '.\\nLoaded ' + itemsLoaded + ' of ' + itemsTotal + ' files.' );\n    };\n\n    this.loadingManager.onLoad = function ( ) {\n      if ( typeof that.loadingDiv !== 'undefined' ) {\n        that.loadingDiv.classList.add( 'hidden' );\n      }\n\n\n      if ( document.body.classList.contains( 'newsroom') ) {\n        document.body.style.position = 'inherit';\n      }\n    };\n\n    this.loadingManager.onError = function ( url ) {\n      console.log( 'There was an error loading ' + url );\n      this.appParams.is3d = false;\n    };\n  }\n\n  setupListeners() {\n    document.addEventListener( 'mousemove', this.onMouseMove.bind( this ) );\n    window.addEventListener( 'resize', this.resize.bind( this ) );\n\n    [ ...document.querySelectorAll( '.has-fog' ) ].map( ( el ) => {\n      el.addEventListener( 'mouseenter', this.onMouseEnter.bind( this ) );\n      el.addEventListener( 'mouseleave', this.onMouseLeave.bind( this ) );\n    });\n\n    monitorScroll(\n      ratio => {\n        this.scrollPercentage = (ratio).toFixed(3);\n        this.mouseWX *= 0.9;\n        this.mouseWY *= 0.9;\n      }\n    );\n\n    monitorWheel(\n      ( scrollTarget ) => {\n        this.direction = this.scroll > 0 ? -1 : 1;\n        this.scrollTarget = scrollTarget;\n      }\n    );\n\n    const playbutton = document.getElementById('playbutton');\n    const that = this;\n    if ( playbutton ) {\n      playbutton.addEventListener('click', () => {\n        if ( this.appParams.state !== 'playing' ) {\n          this.setState( 'playing' );\n        } else {\n          this.setState( 'paused' );\n        }\n\n        if ( ! this.appParams.audioPlaying ) {\n          that.appParams.audioPlaying = true;\n\n          if ( this.appParams.isAppleDevice ) {\n            that.audio?.play();\n          } else {\n            that.mediaElement?.play();\n          }\n\n          var volume = { x : 0 };\n          new TWEEN.Tween(volume).to({\n              x: 0.2\n          }, 5000).onUpdate(function( val ) {\n             that.audio.setVolume( val.x );\n          }).start();\n\n        } else {\n          that.audio?.pause();\n          that.mediaElement?.pause();\n          that.appParams.audioPlaying = false;\n        }\n\n        if ( ! that.video?.isPlaying ) {\n          that.video?.play();\n        } else {\n          that.video?.pause();\n        }\n      });\n    }\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.composer?.setSize( this.width, this.height );\n    this.renderer.setSize( this.width, this.height );\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n    if ( this.screenUniforms ) {\n      this.screenUniforms.u_resolution.value = new THREE.Vector2( this.width, this.height );\n    }\n  }\n\n  loadAudio() {\n    const listener = new THREE.AudioListener();\n    this.audio = new THREE.Audio( listener );\n    const file = '../../public/TheDistrictVR.mp3';\n    this.fftSize = 128;\n\n    if ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) {\n      const that = this;\n      const loader = new THREE.AudioLoader();\n      loader.load( file, function ( buffer ) {\n        that.audio.setBuffer( buffer );\n        that.audio.setLoop( true );\n        that.audio.setVolume( 0.0 );\n        that.audio.play();\n      } );\n    } else {\n      this.mediaElement = document.getElementById( 'beat' );\n      this.mediaElement.loop = true;\n      this.audio.setMediaElementSource( this.mediaElement );\n      this.audio.setVolume( 0.0 );\n    }\n\n    this.analyser = new THREE.AudioAnalyser( this.audio, this.fftSize );\n    this.analyser.analyser.smoothingTimeConstant = 0.90;\n    this.audioFormat = THREE.LuminanceFormat;\n    this.screenUniforms.tAudioData = { value: new THREE.DataTexture( this.analyser.data, this.fftSize / 2, 1, this.audioFormat ) };\n  }\n\n  loadModels() {\n    const that = this;\n\n    this.video = document.getElementById( 'bgvid' );\n    this.video.src = visuals;\n    this.video.load();\n    this.vTexture = new THREE.VideoTexture( this.video );\n    // this.vTexture.minFilter = THREE.LinearFilter;\n    // this.vTexture.magFilter = THREE.LinearFilter;\n    this.vTexture.format = THREE.RGBAFormat;\n\n    this.screenUniforms = {\n      u_time: { value: 0.0 },\n      u_resolution: { value: new THREE.Vector2( this.width, this.height ) },\n      u_mouse: { value: new THREE.Vector2( this.width / 2.0, this.height / 2.0 ) },\n      u_video: { value: this.vTexture },\n      tAudioData: { value: new THREE.DataTexture() },\n      videox: { value: true },\n      globalvideo: { value: true },\n      postfilm: { value: true },\n      postglitch: { value: false },\n      postcolor: { value: true },\n    },\n\n    this.screenMaterial = new THREE.MeshBasicMaterial({\n      color: 0x999999,\n    });\n\n    this.floorMaterial = new THREE.ShaderMaterial({\n      uniforms: this.screenUniforms,\n      vertexShader,\n      fragmentShader: floorFragmentShader,\n      transparent: true,\n    });\n\n    const dracoLoader = new DRACOLoader();\n\n    this.loader = new GLTFLoader( this.loadingManager );\n    this.loader.setDRACOLoader(dracoLoader);\n    that.lights = [];\n\n    dracoLoader.setDecoderConfig({ type: 'js' });\n    dracoLoader.setDecoderPath('https://www.gstatic.com/draco/v1/decoders/'); \n    that.loader = new GLTFLoader( that.loadingManager );\n    that.loader.setDRACOLoader(dracoLoader);\n\n    that.loader.load( club, function ( gltf ) {\n      gltf.scene.traverse( function ( child ) {\n        // make dj controller always visible\n        if ( child.isMesh && child.name.includes( 'DJ_Controller' ) ) {\n          child.frustumCulled = false;\n        }\n        if ( child.name.includes( 'HandRef') ) {\n          child.visible = false;\n        }\n        if ( child.name.includes( 'Truss' ) ) {\n          child.traverse( ( o ) => {\n            o.material = new THREE.MeshStandardMaterial( {\n              color: new THREE.Color( 0x040404 ),\n              emissive: new THREE.Color( 0x000000 ),\n            });\n          });\n        }\n        // add screenmaterial\n        if (child.name.includes( 'WallScreen') ) {\n          child.traverse( ( screen ) => {\n              screen.material = that.screenMaterial;\n              screen.castShadow = false;\n              screen.material.needsUpdate = true;\n            that.screens.push( screen );\n          } );\n\n        }\n      } );\n\n      gltf.scene.position.set( -6.25, 0, 0);\n      that.scene.add( gltf.scene );\n    } );\n  }\n\n  addLights() {\n    const color = new THREE.Color( 0x7777FF );\n    const intensity = 0.1;\n\n    const l1color = 0x662266;\n    const l2color = 0xff22ff;\n    const l3color = 0xccccff;\n\n    this.amblight = new THREE.AmbientLight( this.appParams.ambLight.color, this.appParams.ambLight.intensity );\n    this.scene.add( this.amblight );\n\n    this.dirLight1 = new THREE.DirectionalLight( this.appParams.dirLight1.color, this.appParams.dirLight1.intensity );\n    this.dirLight1.position.set( this.appParams.dirLight1.position.x, this.appParams.dirLight1.position.y, this.appParams.dirLight1.position.z );\n    this.dirLight1.target.position.set( this.appParams.dirLight1.target.position.x, this.appParams.dirLight1.target.position.y, this.appParams.dirLight1.target.position.z );\n    this.scene.add( this.dirLight1 );\n    this.scene.add( this.dirLight1.target );\n\n    // this.lightHelper2 = new THREE.DirectionalLightHelper( this.dirLight1 );\n    // this.scene.add( this.lightHelper2 );\n\n    this.dirLight2 = new THREE.DirectionalLight( this.appParams.dirLight2.color, this.appParams.dirLight2.intensity );\n    this.dirLight2.position.set( this.appParams.dirLight2.position.x, this.appParams.dirLight2.position.y, this.appParams.dirLight2.position.z );\n    this.dirLight2.target.position.set( this.appParams.dirLight2.target.position.x, this.appParams.dirLight2.target.position.y, this.appParams.dirLight2.target.position.z );\n    this.scene.add( this.dirLight2 );\n    this.scene.add( this.dirLight2.target );\n\n    this.spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\n    this.spotLight1.position.set( this.appParams.spotLight1.position.x, this.appParams.spotLight1.position.y, this.appParams.spotLight1.position.z );\n    this.spotLight1.angle = this.appParams.spotLight1.angle;\n    this.spotLight1.intensity = this.appParams.spotLight1.intensity;\n    this.spotLight1.penumbra = this.appParams.spotLight1.penumbra;\n    this.spotLight1.decay = 1.0;\n    this.spotLight1.distance = this.appParams.spotLight1.distance;\n\n    this.spotLight1.castShadow = false;\n    this.scene.add( this.spotLight1 );\n\n    // this.lightHelper1 = new THREE.SpotLightHelper( this.spotLight1 );\n    // this.scene.add( this.lightHelper1 );\n\n    this.spotLight1.target.position.set( this.appParams.spotLight1.target.position.x, this.appParams.spotLight1.target.position.y, this.appParams.spotLight1.target.position.z );\n    this.scene.add( this.spotLight1.target );\n  }\n\n  addObjects() {\n\n    const camCurve = [];\n    camCurve.push( this.initialCameraPosition );\n    camCurve.push( new THREE.Vector3(0,6,17) );\n    camCurve.push( new THREE.Vector3(0,6,7) );\n    camCurve.push( new THREE.Vector3(6,6,-8) );\n    camCurve.push( new THREE.Vector3(4,6,-20) );\n    camCurve.push( new THREE.Vector3(0,5,-25) );\n    camCurve.push( new THREE.Vector3(0,5.5,-22) );\n\n    this.camCurve = new THREE.CatmullRomCurve3( camCurve ); \n  }\n\n  addComposer() {\n    this.composer = new EffectComposer( this.renderer );\n    this.composer.addPass( new RenderPass( this.scene, this.camera ) );\n\n    this.followMouseShader = {\n      uniforms: {\n        u_time: { value: 0.0 },\n        tDiffuse: { value: null },\n        u_mouse: { value: new THREE.Vector2(0,0) },\n        u_resolution: { value: new THREE.Vector2( this.width, this.height ) },\n        mWidth: { value: 400.0 },\n        mHeight: { value: 400.0 },\n        smoothness: { value: 0.1 },\n        newCol: { value: new THREE.Vector3(0.81,0.84,1.0) }\n      },\n      vertexShader,\n      fragmentShader: followMouseShader,\n    };\n    this.followMousePass = new ShaderPass( this.followMouseShader );\n    this.composer.addPass( this.followMousePass );\n\n    this.bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );\n    this.bloomPass.threshold = this.appParams.bloomThreshold;\n    this.bloomPass.strength = this.appParams.bloomStrength;\n    this.bloomPass.radius = this.appParams.bloomRadius;\n    this.composer.addPass( this.bloomPass );\n\n\n    this.tdvrPass = new ShaderPass( TDVRShader );\n    this.composer.addPass( this.tdvrPass );\n  }\n\n  onMouseEnter( e ) {\n    this.isOverFogEl = true;\n    this.fogEl = e.target;\n  }\n\n  onMouseLeave() {\n    this.isOverFogEl = false;\n    this.fogEl = null;\n  }\n\n  updateScrollContainer() {\n    if ( this.horizontalContainer ) {\n      const containerTop = this.horizontalContainer.getBoundingClientRect().top;\n      if ( containerTop === 0 ) {\n        if ( this.hciScroll === null ) {\n          this.hciScroll = window.scrollY;\n        }\n        const newScroll = this.hciScroll - window.scrollY;\n        this.horizontalContainer.style.transform = `translate3d(${ newScroll }px, 0, 0 )`;\n      }\n    }\n\n    if ( this.faderContainer ) {\n      const cam = this.faderContainer.querySelector('.camera');\n      const items = [ ...this.faderContainer.querySelectorAll( '.item' ) ];\n      const containerTop = cam.getBoundingClientRect().top;\n      if ( containerTop === 0 ) {\n        if ( this.faderScroll === null ) {\n          this.faderScroll = window.scrollY;\n        }\n        const newScroll = - ( this.faderScroll - window.scrollY) / ( this.faderContainer.getBoundingClientRect().height - cam.getBoundingClientRect().height ) * 3;\n\n        items.forEach( (item, idx) => {\n          const transY = - ( newScroll + 1 - (idx + 1) ) * 200;\n          item.style.opacity = 1. - ( Math.pow( newScroll + 1 - (idx + 1), 4)) * 3;\n          item.style.transform = `translate3d(-50%, ${transY - 50}%,0)`;\n        });\n      }\n    }\n  }\n\n  onMouseMove( e ) {\n    this.oldMouse = this.mouse;\n    this.mouse = new THREE.Vector2( e.clientX / this.width , ( this.height - e.clientY ) / this.height );\n    this.oldMouseSpeed = this.mouseSpeed;\n    this.mouseSpeed = new THREE.Vector2( Math.abs(Math.min((this.mouse.x - this.oldMouse.x) * 10, 1)), Math.abs(Math.min((this.mouse.y - this.oldMouse.y) * 10), 1));\n    this.mouseAcc = new THREE.Vector2( (this.mouse.x - e.clientX) - this.mouseSpeed.x , (this.mouse.y - this.height + e.clientY) - this.mouseSpeed.y );\n\n    this.mouseX = e.clientX;\n    this.mouseY = e.clientY;\n\n    if ( this.isOverFogEl && this.fogEl ) {\n      this.mouseWX = this.fogEl.clientWidth * 0.3;\n      this.mouseWY = this.fogEl.clientHeight * 0.6;\n      this.smoothness = 0.2;\n      this.lerp = 0.05;\n    } else {\n      this.mouseWX = 1;\n      this.mouseWY = 1;\n      this.smoothness = 0.001;\n      this.lerp = 0.05;\n    }\n  }\n\n  updateMouse() {\n    this.lMouse.x -= ( this.lMouse.x - this.mouse.x ) * 0.1;\n    this.lMouse.y -= ( this.lMouse.y - this.mouse.y ) * 0.1;\n\n    this.mouseTargetX -= ( this.mouseTargetX - this.mouseX ) * this.lerp;\n    this.mouseTargetY -= ( this.mouseTargetY - this.mouseY ) * this.lerp;\n\n    this.mouseTargetWX -= ( this.mouseTargetWX - this.mouseWX ) * this.lerp;\n    this.mouseTargetWY -= ( this.mouseTargetWY - this.mouseWY ) * this.lerp;\n\n    this.smoothnessTarget -= ( this.smoothnessTarget - this.smoothness ) * this.lerp / 2.;\n\n    this.scrollTarget -= ( this.scrollTarget - this.lastScrollPos ) * this.lerp;\n\n    this.followMousePass.uniforms.u_mouse.value = this.lMouse;\n    this.followMousePass.uniforms.mWidth.value = this.mouseTargetWX;\n    this.followMousePass.uniforms.mHeight.value = this.mouseTargetWY;\n    this.followMousePass.uniforms.smoothness.value = this.smoothnessTarget;\n  }\n\n  render() {\n    this.time += 0.05;\n    this.controls.update();\n    TWEEN.update();\n\n    this.updateMouse();\n    this.updateScrollContainer();\n\n    //update shaders\n    this.tdvrPass.uniforms.dattime.value += .012,\n    this.tdvrPass.uniforms.dattime.value > 6.5 && (this.tdvrPass.uniforms.dattime.value = -1);\n\n    if ( this.analyser && this.dirLight1 ) {\n      this.analyser.getFrequencyData();\n      this.dirLight1.intensity = Math.pow(this.analyser.data[ this.appParams.analyserIndex ] / 10000 * this.appParams.analyserIntensity, 1);\n      this.screenUniforms.u_time.value = this.time * 0.025;\n      this.screenUniforms.tAudioData.value.needsUpdate = true;\n    }\n\n    this.followMousePass.uniforms.u_time.value = this.time * 0.025;\n\n    let point = this.scrollPercentage;\n    if ( point < 0 ) {\n      point = 0;\n    } else if ( point > 1 ) {\n      point = 1;\n    }\n\n    try {\n      this.camCurve.getPoint( point, this.camPos );\n    } catch( e ) {\n      \n    }\n\n    this.camera.lookAt( this.pultPos );\n\n    Object.assign( this.camPos, {\n      x: this.camPos.x - Math.sin( .5 * Math.PI * ( this.mouse.x - .5 ) ),\n      y: this.camPos.y + Math.sin( .25 * Math.PI * ( this.mouse.y - .5 ) ),\n      z: this.camPos.z - Math.cos( .5 * Math.PI * ( this.mouse.x - .5 ) ),\n    });\n\n    this.camera.position.set( ...this.camPos );\n\n    this.scroll -=(this.scroll - this.scrollTarget) * 0.005;\n    this.scroll *= 0.9;\n\n    if ( this.appParams.is3d ) {\n      this.composer.render( this.scene, this.camera );\n    }\n\n    window.requestAnimationFrame( this.render.bind( this ) );\n  }\n}","import { ScrollSpy, Modal } from \"bootstrap\";\nimport Swiper, { Navigation, Pagination } from 'swiper';\nimport CC from 'CookieConsent';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/pagination';\nimport 'swiper/css/lazy';\nimport 'cookieconsent/build/cookieconsent.min.css';\n\nimport '../images/club-entrance.jpg';\n\n\nexport default function DistrictVR() {\n  let postContainer = document.querySelector( '.medium-posts' );\n  let mediumArticles;\n\n  const updateMediumArticles = ( articles ) => {\n    const domArticles = [ ...postContainer.querySelectorAll( '.post' ) ];\n    articles.items.splice( 2 );\n\n    [ ...articles.items ].forEach( ( a, idx) => {\n      updateArticle( domArticles[ idx ], a );\n    });\n  };\n\n  const navButton = document.querySelector('button.hamburger');\n  const mobileMenu = document.querySelector('.mobile-menu');\n  const navLinks = mobileMenu?.querySelectorAll( 'a' );\n\n  if ( navLinks ) {\n    [ ...navLinks ].forEach( link => {\n      link.addEventListener( 'click', () => {\n        mobileMenu.classList.remove( 'open' );\n        navButton.classList.remove( 'is-active' );\n      });\n    });\n  }\n\n  navButton?.addEventListener( 'click', () => {\n    navButton.classList.toggle( 'is-active' );\n    mobileMenu.classList.toggle( 'open' );\n  });\n\n  const updateArticle = ( domEl, article ) => {\n    if ( ! domEl ) {\n      return;\n    }\n\n    const dateOptions = {year: 'numeric', month: 'long', day: 'numeric' };\n\n    const image = domEl.querySelector('img');\n    const title = domEl.querySelector('h4');\n    const desc = domEl.querySelector('.description');\n    const more = domEl.querySelector('.more a');\n    const cats = domEl.querySelector('.categories');\n    const date = domEl.querySelector( '.post-date' );\n\n    image.src = article.thumbnail;\n    title.innerHTML = article.title;\n    more.href = article.link;\n    desc.innerHTML = article.description;\n    const newP = desc.querySelector( 'p:first-of-type' );\n    desc.innerHTML = newP.innerHTML;\n    cats.innerHTML = article.categories.join( ', ' );\n    date.innerHTML = article.pubDate ? new Date( article.pubDate ).toLocaleDateString('en-US', dateOptions) : '';\n\n//     $re = '/(<p>.*?<\\/p>)/m';\n// preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);\n  };\n\n  const initSwiper = () => {\n    const swiper = new Swiper('.swiper', {\n      modules: [ Navigation, Pagination ],\n      loop: true,\n      preloadImages: false,\n      lazy: true,\n      pagination: {\n        el: '.swiper-pagination',\n        clickable: true,\n      },\n      on: {\n        click: function ( e ) {\n          e.slideNext();\n        },\n      },\n    });\n  };\n\n  const init = () => {\n    if ( postContainer ) {\n    fetch('https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/thedistrictvr')\n      .then( resp => resp.json() )\n      .then( articles => updateMediumArticles( articles ) )\n      .catch( () => {\n        if ( postContainer.querySelector( '.post-wrap' ) ) {\n          postContainer.querySelector( '.post-wrap' ).innerHTML =\n            '<div class=\"col text-center\" style=\"color: var(--color-secondary)\"><p>Error getting posts from Medium, please try again later or navigate to medium directly with the link below.<p></div>';\n        }\n      });\n    }\n\n    new ScrollSpy(document.body, {\n      target: '#main-nav',\n    });\n\n    initSwiper();\n    \n    window.cookieconsent.initialise({\n      \"palette\": {\n        \"popup\": {\n          \"background\": \"#000a\",\n          \"text\": \"#0f0\"\n        },\n        \"button\": {\n          \"background\": \"transparent\",\n          \"text\": \"#0f0\",\n          \"border\": \"#0f0\"\n        }\n      },\n      \"position\": \"bottom-right\"\n    });\n  };\n\n\n\n  init();\n}","import '../styles/_index.scss';\nimport Sketch from './district3d.js';\nimport DistrictVR from './districtvr';\n\nif (process.env.NODE_ENV === 'development') {\n  require('../index.html');\n}\n\ndocument.addEventListener(\n  'DOMContentLoaded',\n  () => {\n    new Sketch({\n      dom: document.getElementById( 'threejs-container' )\n    });\n    new DistrictVR();\n  },\n  false\n);\n\n\n\n\n","module.exports = \"uniform vec2 u_resolution;  // Canvas size (width,height)\\nuniform vec2 u_mouse;       // mouse position in screen pixels\\nuniform float u_time;       // Time in seconds since load\\nuniform sampler2D u_image;\\nuniform sampler2D tAudioData;\\nuniform sampler2D u_video;\\nuniform bool videox;\\nuniform bool globalvideo;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\nvoid main() {\\n\\n\\tvec4 video = texture2D( u_video, ( vUv + vec2(0., 0.19) ) * vec2(1.0, 1.2) );\\n\\tvec2 s = u_resolution; // Screen\\n\\tvec2 i = vec2(853,480); // Image\\n\\tfloat rs = s.x / s.y;\\n\\tfloat ri = i.x / i.y;\\n\\tvec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n\\tvec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n\\tvec2 nUv = video.xy * s / new + offset;\\n\\n\\t// 1 nice effect ?\\n\\tif ( videox ) {\\n\\t\\tvideo = texture2D( u_video, nUv - u_mouse * 0.7 + 0.2 );\\n\\t}\\n\\n\\tif ( globalvideo ) {\\n\\t\\tnUv = gl_FragCoord.xy / u_resolution;\\n\\t\\tvideo = texture2D( u_video, nUv );\\n\\t}\\n\\n\\t// 2 global position\\n\\t// nUv = gl_FragCoord.xy / u_resolution;\\n\\t// video = texture2D( u_video, nUv - u_mouse );\\n\\n\\t// vec2 nUv = distanceUV * multiplier + 0.5;\\n\\t\\n\\tgl_FragColor = video;\\n}\\n\\n// working example\\n// void main() {\\n// \\tvec2 nUv = vUv * 3./2.;\\n// \\tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n// \\tvec3 color = vec3( 1.0, 1.0, 0.0 );\\n// \\tfloat f = texture2D( tAudioData, vec2( nUv.x, 0.0 ) ).r;\\n// \\tfloat i = step( nUv.y, f ) * step( f - 0.0125, nUv.y );\\n\\n// // \\t// convert frequency to colors\\n// \\tvec3 col = vec3( 0., 4.0*f*(1.0-f), 1.0-f ) * f;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 - smoothstep( 0.0, 0.15, nUv.y );\\n\\n// \\tgl_FragColor = vec4( vec3(col), 1.0 );\\n// }\\n\\n// void main() {\\n//   vec2 nUv = vUv - 0.5;\\n//   nUv = ( vUv ) * 0.05;\\n//   vec4 audio = texture2D( tAudioData, nUv );\\n//   vec4 image = texture2D( u_image, vUv + audio.xy);\\n//   float val = audio.x;\\n//   gl_FragColor = image + image * audio;\\n// \\t// image - audio;\\n// }\\n\\n// void main() {\\n// \\tvec2 nUv = vUv - 0.5;\\n// \\tvec4 col = texture2D(tAudioData, nUv);\\n// \\t// float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\\n// \\tgl_FragColor = col;\\n// }\\n\\n// void main() {\\n// \\tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n// \\tvec3 color = vec3( 1.0, 1.0, 0.0 );\\n\\n// \\tfloat f = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\\n\\n// \\tfloat i = step( vUv.y, f ) * step( f - 0.0125, vUv.y );\\n\\n// \\tgl_FragColor = vec4( mix( backgroundColor, color, i ), 1.0 );\\n// \\tgl_FragColor = vec4( f, f, f, 1.0 );\\n// }\\n\\n// void main() {\\n//     // create pixel coordinates\\n// \\tvec2 uv = vUv;\\n\\n//     // the sound texture is 512x2\\n//   int tx = int(uv.x*512.0);\\n    \\n// \\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\\n// \\tfloat fft = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\\n\\n//   // second row is the sound wave, one texel is one mono sample\\n//   float wave = texture2D( tAudioData, vec2( vUv.y, 0.0 ) ).x;\\n\\t\\n// \\t// convert frequency to colors\\n// \\tvec3 col = vec3( 0., 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 - smoothstep( 0.0, 0.15, abs(wave - uv.y) );\\n\\t\\n// \\t// output final color\\n// \\tgl_FragColor = vec4(col,1.0);\\n// }\\n\\n// void main() {\\n//   vec2 nUv = vec2( vUv - 0.5 );\\n//   vec2 vUvMouse = vec2( vUv.x - u_mouse.x, vUv.y - u_mouse.y);\\n//   vec2 dxy = pixelSize * 2./ resolution;\\n//   float circle = smoothstep(\\n//     0.1,\\n//     1.,\\n//     dot(nUv, nUv) * 4.\\n//   );\\n//   vec2 pixelated = (dxy * floor( vUv / dxy ) );\\n\\n//   //around mouse\\n//   vec2 mouseUv = nUv;\\n//   mouseUv += ( pixelated - 0.5 ) * ( distance( u_mouse, mouseUv + 0.5) * 1.) * length(u_mouseSpeed) * 4.;\\n\\n//   //end around mouse\\n\\n\\n//   // gl_FragColor = texture2D(tDiffuse, pixelated - circle);\\n//   // gl_FragColor = texture2D( tDiffuse, vUv + nUv / 4.); // add border effect lines\\n//   // gl_FragColor = texture2D( u_image, vUv + (1. - circle) * mouseUv / 4.); // dont distort center with circle\\n//   gl_FragColor = texture2D( u_image, vUv - nUv * ( u_mouse )); //somehow working\\n//   // gl_FragColor = texture2D( u_image, mouseUv + 0.5); //try to only apply at mouse position\\n//   // gl_FragColor = vec4( circle, length(u_mouseSpeed), circle, 1.0 );\\n// }\\n\\n// void main() {\\n//     // create pixel coordinates\\n// \\tvec2 uv = vUv;\\n\\n// \\t// the sound texture is 512x2\\n// \\tint tx = int(uv.x*512.0);\\n    \\n// \\t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\\n// \\tfloat fft  = texelFetch( tAudioData, ivec2(tx,0), 0 ).x; \\n\\n// \\t// second row is the sound wave, one texel is one mono sample\\n// \\tfloat wave = texelFetch( tAudioData, ivec2(tx,1), 0 ).x;\\n\\t\\n// \\t// convert frequency to colors\\n// \\tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\\n\\n//     // add wave form on top\\t\\n// \\tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\\n\\t\\n// \\t// output final color\\n// \\tgl_FragColor = vec4(col,1.0);\\n// }\\n\\n//\\n// Color version of: https://www.shadertoy.com/view/XlXGDf\\n//\\n// Based on: https://www.shadertoy.com/view/4dfSRS\\n//\\n\\n// #define PI 3.14159\\n\\n// vec4 audioEq() {\\n//     float vol = 0.0;\\n    \\n//     // bass\\n//     float lows = 0.0;\\n//     for(float i=0.;i<85.; i++){\\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\\n//         lows += v*v;\\n//         vol += v*v;\\n//     }\\n//     lows /= 85.0;\\n//     lows = sqrt(lows);\\n    \\n//     // mids\\n//     float mids = 0.0;\\n//     for(float i=85.;i<255.; i++){\\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\\n//         mids += v*v;\\n//         vol += v*v;\\n//     }\\n//     mids /= 170.0;\\n//     mids = sqrt(mids);\\n    \\n//     // treb\\n//     float highs = 0.0;\\n//     for(float i=255.;i<512.; i++){\\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\\n//         highs += v*v;\\n//         vol += v*v;\\n//     }\\n//     highs /= 255.0;\\n//     highs = sqrt(highs);\\n    \\n//     vol /= 512.;\\n//     vol = sqrt(vol);\\n    \\n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\\n// }\\n\\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\\n// {\\n// \\tvec2 uv = fragCoord.xy / iResolution.xy;\\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\\n\\n//     vec4 eq = audioEq();\\n// \\tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\\n// \\tfloat r = length( uv );\\n// \\tfloat a = 0.01 - r;\\n// \\tuv = vec2( theta, r );\\n\\n// \\tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\\n// \\tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\\n//     float y = t1 * t2 * a * 16.9;\\n    \\n// \\tfragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       1.0); \\n// }\\n\\n// uniform vec2 u_resolution;  // Canvas size (width,height)\\n// uniform vec2 u_mouse;       // mouse position in screen pixels\\n// uniform float u_time;       // Time in seconds since load\\n// uniform sampler2D tAudioData;\\n// uniform sampler2D u_image;\\n// uniform vec2 resolution;\\n\\n// varying vec2 vUv;\\n// varying vec3 vNormal;\\n\\n// float squared(float value) {\\n// \\treturn value * value;\\n// }\\n\\n// float getAmp(float frequency) {\\n// \\treturn texture2D(tAudioData, vec2(frequency / 512.0, 0)).x;\\n// }\\n\\n// float getWeight(float f) {\\n// \\treturn (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\\n// }\\n\\n// #define P 3.14159\\n// #define PI 3.14159\\n// #define E .001\\n\\n// #define T .03 // Thickness\\n// #define W 2.  // Width\\n// #define A .29 // Amplitude\\n// #define V 0.5  // Velocity\\n\\n// void main() {\\n  //   gl_FragColor = vec4(vUv, 0.0, 1.0);\\n  // gl_FragColor = vec4(vNormal, 1.0);\\n\\n\\t\\t\\t\\t// vec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\\n\\t\\t\\t\\t// vec3 color = vec3( 0.5, vvUv.x, vUv.y );\\n\\n\\t\\t\\t\\t// float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\\n        // float g = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).y;\\n\\t\\t\\t\\t// float i = smoothstep( vUv.x, 0.0, f );\\n\\n\\t\\t\\t\\t// gl_FragColor = vec4( mix( backgroundColor, color, f ), 1.0 );\\n  // gl_FragColor = vec4( 0.5 + vUv.x, 0.1, 0.8, 1.0 );\\n\\t// gl_FragColor = texture2D( u_image, vUv + tAudioData);\\n\\t\\t// vec2 uvTrue = gl_gl_FragCoord.xy / 30. / 20.;\\n    // vec2 uv = -1.0 + 2.0 * uvTrue;\\n\\n    // vec2 uv = gl_gl_FragCoord.xy / u_resolution;\\n    // float fft = texture2D( tAudioData, vec2(uv.x * 0.25, 1.)).x;\\n    // gl_FragColor = vec4(uv * pow(fft, 2.0), 0., 1.);\\n\\n\\t\\t// float lineIntensity\\t;\\n    // float glowWidth = 0.1;\\n    // vec3 color = vec3(0.0);\\n\\n\\t\\t// for(float i = 0.0; i < 5.0; i++) {\\n\\t\\t// \\tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\\n\\t\\t// \\tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\\n\\t\\t// \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tglowWidth * (2.0 - sin(u_time * 0.23)),\\n\\t\\t// \\t\\t\\t\\t\\t\\t\\t\\t\\t\\tglowWidth * (2.0 - cos(u_time * 0.19)));\\n\\t\\t// }\\n\\n\\t// for(float i = 0.0; i < 5.0; i++) {\\n        \\n\\t// \\tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\\n  //       float Y = uv.y + getWeight(squared(i) * 20.0) *\\n  //           (texture(tAudioData, vec2(uvTrue.x, 1)).x - 0.5);\\n  //       lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + u_time,2.0) - 1.0));\\n\\t// \\tglowWidth = abs(lineIntensity / (150.0 * Y));\\n\\t// \\tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\\n  //                     glowWidth * (2.0 - sin(u_time * 0.23)),\\n  //                     glowWidth * (2.0 - cos(u_time * 0.19)));\\n\\t// }\\t\\n\\n\\t// gl_FragColor = vec4(color, 1.0);\\n\\n\\t// vec2 c = gl_gl_FragCoord.xy / 600.;\\n\\t// float s = texture(tAudioData, c * .5).r;\\n\\t// c = vec2(0, A*s*sin((c.x*W+u_time*V)* 2.5)) + (c*2.-1.);\\n\\t// float g = max(abs(s/(pow(c.y, 2.1*sin(s*P))))*T,\\n\\t// \\t\\t\\t  abs(.1/(c.y+E)));\\n\\t// gl_FragColor = vec4(g*g*s*.6, g*s*.44, g*g*.7, 1);\\n\\n\\t// vec2 uv = vUv;\\n\\t// uv = abs( 2.0 * ( uv - 0.5 ) );\\n\\n\\t// float theta = 1.0 * ( 1.0 / ( PI / 2.0 ) ) * atan( uv.x, uv.y );\\n\\t// float r = length( uv );\\n\\t// float a = 0.01 - r;\\n\\t// uv = vec2( theta, r );\\n\\n\\t// vec4 t1 = texture2D( tAudioData, vec2( uv[0], 0.9 ) );\\n\\t// vec4 t2 = texture2D( tAudioData, vec2( uv[1], 0.9 ) );\\n\\t// float y = t1[3] * t2[0] * a * 1500.5;\\n\\t// gl_FragColor = vec4( sin( y * PI ), sin( y * PI ), sin( y * PI ), 1.0 );\\n// }\\n\\n// vec2 hash(in vec2 p) \\n// {\\n//     p = vec2( dot(p,vec2(127.1,311.7)),\\n// \\t\\t\\t  dot(p,vec2(299.5,783.3)) );\\n\\n// \\treturn -1.0 + 2.0*fract(sin(p)*43758.545);\\n// }\\n\\n// float noise(in vec2 p) \\n// {\\n//     vec2 p00 = floor(p);\\n//     vec2 p10 = p00 + vec2(1.0, 0.0);\\n//     vec2 p01 = p00 + vec2(0.5, 1.0);\\n//     vec2 p11 = p00 + vec2(1.0, 1.0);\\n    \\n//     vec2 s = p - p00;\\n    \\n//     float a = dot(hash(p00), s);\\n// \\tfloat b = dot(hash(p10), p - p10);\\n// \\tfloat c = dot(hash(p01), p - p01);\\n// \\tfloat d = dot(hash(p11), p - p11);\\n\\n//     vec2 q = s*s*s*(s*(s*6.0 - 15.0) + 10.0);\\n\\n//     float c1 = b - a;\\n//     float c2 = c - a;\\n//     float c3 = d - c - b + a;\\n\\n//    \\treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\\n// }\\n\\n\\n// float fbm(vec2 p) \\n// {\\n// \\tfloat h = noise(p) * texture(tAudioData, vec2(0.0, 0.0)).r;\\n//     h += noise(p * 2.0) * texture(tAudioData, vec2(0.25, 0.0)).r * 0.5;\\n//     h += noise(p * 4.0) * texture(tAudioData, vec2(0.50, 0.0)).r * 0.25;\\n//     h += noise(p * 8.0) * texture(tAudioData, vec2(0.75, 0.0)).r * 0.125;\\n    \\n//     return h;\\n// }\\n\\n// // Taken from http://iquilezles.org/www/articles/palettes/palettes.htm\\n// vec3 ColorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\\n// {\\n//     return a + b*cos( 6.28318*(c*t+d) );\\n// }\\n\\n// vec3 ContourLines(vec2 p) \\n// {\\n// \\tfloat h = fbm(p*5.5)*10.0;\\n//     float t = fract(h);\\n//     float b = 1.0 - fract(h + 1.0);\\n//     return ColorPalette(h*0.1,\\n//                         vec3(1.0), vec3(0.7), vec3(1.0), vec3(0.0, 0.333, 0.666)) * \\n//                (pow(t, 16.0) + pow(b, 4.0));\\n        \\n// }\\n\\n// vec2 Position() \\n// {\\n// \\treturn vec2(noise(vec2(u_time*0.014)), noise(vec2(u_time*0.012))) +\\n//            vec2(0.0, u_time * 0.025);\\n// }\\n\\n// void main()\\n// {\\n//   vec2 p = Position() + (gl_FragCoord.xy / max(u_resolution.x, u_resolution.y));\\n// \\tgl_FragColor = vec4(pow(ContourLines(p), vec3(0.55)), 1.0);\\n// }\\n\\n//\\n// Color version of: https://www.shadertoy.com/view/XlXGDf\\n//\\n// Based on: https://www.shadertoy.com/view/4dfSRS\\n//\\n\\n// #define PI 3.14159\\n\\n// vec4 audioEq() {\\n//     float vol = 0.0;\\n    \\n//     // bass\\n//     float lows = 0.0;\\n//     for(float i=0.;i<85.; i++){\\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\\n//         lows += v*v;\\n//         vol += v*v;\\n//     }\\n//     // lows /= 85.0;\\n//     lows = sqrt(lows) * 10.;\\n    \\n//     // mids\\n//     float mids = 0.0;\\n//     for(float i=85.;i<255.; i++){\\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\\n//         mids += v*v;\\n//         vol += v*v;\\n//     }\\n//     // mids /= 170.0;\\n//     mids = sqrt(mids) * 10.;\\n    \\n//     // treb\\n//     float highs = 0.0;\\n//     for(float i=255.;i<512.; i++){\\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\\n//         highs += v*v;\\n//         vol += v*v;\\n//     }\\n//     // highs /= 255.0;\\n//     highs = sqrt(highs) * 10.;\\n    \\n//     // vol /= 512.;\\n//     vol = sqrt(vol) * 10.;\\n    \\n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\\n// }\\n\\n// void main()\\n// {\\n// \\tvec2 uv = (vUv - 0.5) * 0.3;\\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\\n\\n//     vec4 eq = audioEq();\\n// \\tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\\n// \\tfloat r = length( uv );\\n// \\tfloat a = 0.01 - r;\\n// \\tuv = vec2( theta, r );\\n\\n// \\tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\\n// \\tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\\n//   float y = t1 * t2 * a * 16.9;\\n\\n// \\tgl_FragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       sin( y * ( 3.0 * PI ) * eq.x ), \\n//                       1.0); \\n// }\\n\\n// const int numWaves = 6;\\n// const float numStripes = 1.0;\\n// const float numFreqs = 8.0;\\n// const float meanFreq = 5.0;\\n// const float stdDev = 2.0;\\n// const float period = 5.0;\\n// const float pi = 4.0 * atan(1.0);\\n// const float pi2 = 2.0 * pi;\\n// const float ln2 = log(2.0);\\n// const float mean = meanFreq * .59314718;\\n\\n// float wavething(int n, float x){\\n//     float l = ln2 * float(n) + log(x);\\n//     l -= mean;\\n//     return exp(-l * l / stdDev) / 2.0;\\n// }\\n\\n// void main()\\n// {\\n//     gl_FragColor = vec4(0.0);\\n//     float scale = exp2(-fract(u_time / period));\\n//     float sum1 = 0.0;\\n//     for(int n = 0; n < int(numFreqs); n++){\\n//         sum1 += wavething(n, scale);\\n//     }\\n//     vec2 xy = pi2 * numStripes\\n//         * ((2.0 * gl_FragCoord.xy - u_resolution.xy) / u_resolution.y);\\n    \\n//     float sum2 = 0.0;\\n//     for(int n = 0; n < numWaves; n++){\\n//         float theta = pi * float(n) / float(numWaves);\\n//         vec2 waveVec = vec2(cos(theta), sin(theta));\\n//         float phase = dot(xy, waveVec);\\n//         for(int k = 0; k < int(numFreqs); k++){\\n//             sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\\n//         }\\n//     }\\n//     gl_FragColor += vec4(1.0 - sum2 / sum1);\\n//     xy /= pi2 * numStripes;\\n//     float r = length(xy) * 0.35;\\n//     if(sum2 / sum1 < .5){\\n//         gl_FragColor.x *= 2.0;\\n//         gl_FragColor.y *= texture(tAudioData, vec2(.161616 * r + .161616, .2)).x;\\n//         gl_FragColor.z *= texture(tAudioData, vec2(.161616 * r + .333333, .2)).x;\\n//         gl_FragColor = 1.0 - gl_FragColor;\\n//     }\\n//     // gl_FragColor = 1.0 - (r + 1.0) * gl_FragColor;\\n//     // if(length(gl_FragColor) > 3.0) gl_FragColor = vec4(0.0);\\n// }\\n\\n\"","module.exports = \"uniform vec2 u_resolution;  // Canvas size (width,height)\\nuniform vec2 u_mouse;       // mouse position in screen pixels\\nuniform float u_time;       // Time in seconds since load\\nuniform sampler2D tDiffuse;\\nuniform float mWidth;\\nuniform float mHeight;\\nuniform float smoothness;\\nuniform vec3 newCol;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\n\\n// float rand( vec2 coord ) {\\n//   return fract(sin(dot(coord, vec2(56., 78.)) * 1000.0) * 1000.);\\n// }\\n\\n// float noise( vec2 coord ) {\\n//   vec2 i = floor( coord );\\n//   vec2 f = fract( coord );\\n\\n//   float a = rand(i);\\n//   float b = rand(i + vec2(1.0, 0.0));\\n//   float c = rand(i + vec2(0.0, 1.0));\\n//   float d = rand(i + vec2(1.0, 1.0));\\n\\n//   return mix(a, b, f.x ) * ( c -a ) * f.y * (1.0 - f.x ) + (d-b) * f.x * f.y;\\n// }\\n\\nfloat rand(vec2 n) { \\n\\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\\n}\\n\\nfloat noise(vec2 p){\\n\\tvec2 ip = floor(p);\\n\\tvec2 u = fract(p);\\n\\tu = u*u*(3.0-2.0*u);\\n\\t\\n\\tfloat res = mix(\\n\\t\\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\\n\\t\\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\\n    \\n\\treturn res*res;\\n}\\n\\nfloat circle(vec2 _st, float _radius){\\n  vec2 dist = u_mouse-vUv;\\n  float whRatio = u_resolution.x / u_resolution.y;\\n  dist.y /= whRatio / mWidth * mHeight;\\n  float percentageWidth = mWidth / u_resolution.x;\\n\\treturn 1. - smoothstep(percentageWidth - smoothness,\\n                         percentageWidth + smoothness,\\n                         dot(dist,dist)*4.0);\\n}\\n\\nfloat fbm( vec2 coord ) {\\n  int OCTAVES = 4;\\n  float value = 0.0;\\n  float scale = 0.3;\\n\\n  for (int i=0;i< OCTAVES;i++) {\\n    value += noise( coord ) * scale;\\n    coord *= 2.0;\\n  }\\n\\n  return value;\\n}\\n\\n\\n\\nvoid main() {\\n  float whRatio = u_resolution.x / u_resolution.y;\\n  float percentageWidth = mWidth / u_resolution.x;\\n\\n  vec4 texel = texture2D( tDiffuse, vUv );\\n  vec4 m = vec4(0.1,0.2,0.3,0.1);\\n\\n  vec2 dist = u_mouse - vUv;\\n  dist.y /= whRatio / mWidth * mHeight;\\n\\n  float mult = smoothstep(percentageWidth - smoothness, percentageWidth + smoothness, length( dist ));\\n  // working\\n  // texel.x *= ( mult * mult + newCol.x );\\n  // texel.y *= ( mult * mult + newCol.y );\\n  // texel.z *= ( mult * mult + newCol.z );\\n\\n  vec3 color = vec3(circle(vUv,0.4));\\n  color.x *= newCol.x * 1.2;\\n  color.y *= newCol.y * 1.2;\\n  color.z *= newCol.z * 1.2;\\n\\n  vec2 coord = vUv * 1.2;\\n  vec2 motion = vec2( fbm(coord + vec2(u_time * 1.0, u_time * -2.0 ) ) );\\n  float final = fbm( coord + motion );\\n\\n\\n  gl_FragColor = texel + vec4( color * final, 1.0 );\\n  // gl_FragColor = vec4( newCol, noise(vUv * 20.));\\n}\"","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkthe_district_vr\"] = self[\"webpackChunkthe_district_vr\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [168], function() { return __webpack_require__(3222); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","module","exports","ColorGUIHelper","object","prop","_classCallCheck","this","key","get","concat","getHexString","set","hexString","TDVRShader","uniforms","value","type","postcolor","postfilm","tInput","vertexShader","fragmentShader","Sketch","options","_this$controls$object","loadModels","bind","loadAudio","clock","THREE","time","scroll","scrollTarget","direction","scrollPercentage","screens","appParams","state","exposure","bloomStrength","bloomThreshold","bloomRadius","audioLoaded","audioPlaying","isAppleDevice","test","navigator","userAgent","ambLight","color","intensity","analyserIndex","analyserIntensity","dirLight1","position","x","y","z","target","dirLight2","spotLight1","distance","penumbra","angle","fx","smokeCol","video","videox","globalvideo","is3d","directionalLightIntensity","envMapIntensity","light","postglitch","screenUniforms","loadingDiv","document","getElementById","container","dom","width","offsetWidth","height","offsetHeight","mouse","mouseSpeed","oldMouseSpeed","mouseAcc","lMouseSpeed","lMouse","camPos","pultPos","mouseX","mouseY","mouseTargetX","mouseTargetY","playBackSpeed","logo","querySelector","currentLogo","nav","currentMode","modes","lerp","vid","horizontalContainer","hciScroll","faderContainer","faderScroll","lastScrollPos","isScrolling","mouseWX","mouseWY","mouseTargetWX","mouseTargetWY","relX","relY","smoothness","smoothnessTarget","isOverFogEl","isOverInteractive","g_containerInViewport","scene","camera","initialCameraPosition","initialCameraTarget","AA","window","devicePixelRatio","renderer","antialias","autoClear","powerPreference","setSize","appendChild","domElement","controls","OrbitControls","apply","_toConsumableArray","update","setupLoading","setupListeners","addLights","addObjects","addComposer","render","resize","newState","onChageState","_this","playbutton","classList","toggle","body","style","scrollTo","top","behavior","screenMaterial","screenFragmentShader","forEach","screen","material","needsUpdate","querySelectorAll","el","opacity","TWEEN","Tween","amblight","to","start","_this2","gui","GUI","that","bloomFolder","addFolder","close","add","onChange","toneMappingExposure","Math","pow","bloomPass","threshold","Number","strength","step","radius","lightsFolder","name","addColor","fd1","setY","setZ","fd2","setX","fd3","PI","videoFolder","val","display","postFolder","tdvrPass","followMousePass","newCol","loadingManager","onStart","url","itemsLoaded","itemsTotal","onLoad","contains","onError","console","log","onRatioChange","html","onWheelChange","_this3","addEventListener","onMouseMove","map","onMouseEnter","onMouseLeave","ratio","toFixed","documentElement","scrollTop","scrollHeight","clientHeight","e","deltaY","_that$video","_that$video3","_that$video2","_that$audio2","_that$mediaElement2","_that$audio","_that$mediaElement","setState","audio","pause","mediaElement","play","onUpdate","setVolume","isPlaying","_this$composer","composer","aspect","updateProjectionMatrix","u_resolution","listener","fftSize","load","buffer","setBuffer","setLoop","loop","setMediaElementSource","analyser","smoothingTimeConstant","audioFormat","tAudioData","data","src","visuals","vTexture","format","u_time","u_mouse","u_video","floorMaterial","floorFragmentShader","transparent","dracoLoader","DRACOLoader","loader","GLTFLoader","setDRACOLoader","lights","setDecoderConfig","setDecoderPath","club","gltf","traverse","child","isMesh","includes","frustumCulled","visible","o","emissive","castShadow","push","decay","camCurve","EffectComposer","addPass","RenderPass","followMouseShader","tDiffuse","mWidth","mHeight","ShaderPass","UnrealBloomPass","innerWidth","innerHeight","fogEl","getBoundingClientRect","scrollY","newScroll","transform","cam","items","item","idx","transY","oldMouse","clientX","clientY","abs","min","clientWidth","_this$camera$position","updateMouse","updateScrollContainer","dattime","getFrequencyData","point","getPoint","lookAt","Object","assign","sin","cos","requestAnimationFrame","DistrictVR","postContainer","navButton","mobileMenu","navLinks","link","remove","fetch","then","resp","json","articles","domArticles","splice","a","domEl","article","image","title","desc","more","cats","date","thumbnail","innerHTML","href","description","newP","categories","join","pubDate","Date","toLocaleDateString","year","month","day","updateArticle","updateMediumArticles","catch","ScrollSpy","Swiper","modules","Navigation","Pagination","preloadImages","lazy","pagination","clickable","on","click","slideNext","cookieconsent","initialise","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","r","n","getter","__esModule","d","definition","defineProperty","enumerable","g","globalThis","Function","obj","prototype","hasOwnProperty","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","scripts","getElementsByTagName","Error","replace","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}