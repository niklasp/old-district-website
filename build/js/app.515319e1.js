!function(){var t,n={1856:function(t){t.exports="varying vec2 vUv;\nvarying vec3 vNormal;\nuniform sampler2D tAudioData;\nuniform float u_time;\n\nvoid main() {\n  vUv = uv;\n  vec3 newPosition = position;\n  float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\n  // float g = texture2D( tAudioData, vec2( vUv.y, 1.0 ) ).y;\n  newPosition.x = position.x;\n  newPosition.y = position.y;\n\n  vNormal = normal;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n  // gl_Position = vec4( position, 1.0 );\n}"},2131:function(t){t.exports="#define GLSLIFY 1\nvarying vec2 vUv; \nuniform sampler2D tDiffuse;\n// uniform sampler2D tDiffuse;\nvarying vec2 vUv2;\nuniform float fade;\nuniform float gamma;\nuniform float dattime;\n\nuniform bool postfilm;\nuniform bool postcolor;\n\n// #ifndef OPTI\n// #endif\n\nuniform float vignamount;\nuniform float vignfalloff;\n\n#define GammaCorrection(color, gamma) pow( color, 1.0 / vec3(gamma))\n#define LevelsControlInputRange(color, minInput, maxInput)  min(max(color - vec3(minInput), 0.0) / (vec3(maxInput) - vec3(minInput)), 1.0)\n#define LevelsControlInput(color, minInput, gamma, maxInput) GammaCorrection(LevelsControlInputRange(color, minInput, maxInput), gamma)\n#define LevelsControlOutputRange(color, minOutput, maxOutput)  mix(vec3(minOutput), vec3(maxOutput), color)\n#define LevelsControl(color, minInput, gamma, maxInput, minOutput, maxOutput)   LevelsControlOutputRange(LevelsControlInput(color, minInput, gamma, maxInput), minOutput, maxOutput)\n\n#define smoothness 0.4\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat rand(vec2 co)\n{\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat when_eq(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nvec4 getGlitch(sampler2D inTex, float noise, float xpos){\n\n    vec4 final = texture2D(inTex, vec2(xpos, vUv.y));\n\n    final.rgb = mix(final.rgb, vec3(rand(vec2(vUv.y * dattime))), noise * 0.3).rgb;\n    \n        // Apply a line pattern every 4 pixels\n    final.rgb *= mix(1.0 - (0.15 * noise), 1.0, when_eq(floor(mod(vUv.y * 0.5, 1.0)), 0.0) );\n    \n    // Shift green/blue channels (using the red channel)\n    final.g = mix(final.g, texture2D(inTex, vec2(xpos + noise * 0.05, vUv.y)).g, 1.0);\n    final.b = mix(final.b, texture2D(inTex, vec2(xpos - noise * 0.05, vUv.y)).b, 1.0);\n\n    // float rr=  texture2D(inTex, vUv + vec2(-noise * 0.1, 0.0)).r;\n\n    return mix(final,  texture2D(inTex, vUv + vec2(-noise * 0.1, 0.0)), 0.2);\n}\n\nvec3 scanline(vec2 coord, vec3 screen){\n    const float scale = 0.001;\n    const float amt = 0.035;// intensity of effect\n    const float spd = 2.0;//speed of scrolling rows transposed per second\n    \n    screen.rgb += sin((coord.y / scale - (dattime * spd * 6.28))) * amt;\n    return screen;\n}\n\nvoid main() { \n\n        // Create large, incidental noise waves\n    float noise = max(0.0, snoise(vec2(dattime, vUv.y * 0.3)) - 0.3) * (1.42857);\n    \n    // Offset by smaller, constant noise waves\n    noise = noise + (snoise(vec2(dattime*10.0, vUv.y * 2.4)) - 0.5) * 0.15;\n        \n        // noise *=  smoothstep(0.5, 1.0, ((sin(dattime) * 0.5) + 1.0)) * 0.5;\n    noise *=  max(1.0 - dattime * 0.5, 0.0);\n\n    vec4 base = vec4(1.0);\n    if(noise == 0.0 || ! postcolor ){\n        base = texture2D(tDiffuse, vUv);\n    }\n    else {\n\n        // Apply the noise as x displacement for every line\n        float xpos = vUv.x - (noise * noise * 0.035);\n        base = getGlitch(tDiffuse, noise, xpos);\n    }\n   \n    // vec4 base         = texture2D(tDiffuse, vUv);\n    \n    vec4 blend        = texture2D(tDiffuse, vUv);\n\n    vec4 final        = (1.0 - ((1.0 - base) * (1.0 - blend)));\n\n    float dist        = distance(vUv2, vec2(0.5));\n\n    // final.rgb       =  LevelsControl(final.rgb, 0.0, gamma, 1.0, 0.0, 0.9);\n\n    final.rgb        *= smoothstep(0.8, vignfalloff * 0.799, dist * (vignamount + vignfalloff));\n\n    if ( postfilm ) {\n      final.rgb = scanline(vUv, final.rgb);\n    }\n\n    gl_FragColor      = final;\n\n}"},2362:function(t){t.exports="uniform vec2 u_resolution;  // Canvas size (width,height)\nuniform vec2 u_mouse;       // mouse position in screen pixels\nuniform float u_time;       // Time in seconds since load\nuniform sampler2D u_image;\nuniform sampler2D tAudioData;\nuniform sampler2D u_video;\nuniform bool videox;\nuniform bool globalvideo;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    \n\treturn res*res;\n}\n\nfloat fbm( vec2 coord ) {\n  int OCTAVES = 1;\n  float value = 0.0;\n  float scale = 0.1;\n\n  for (int i=0;i< OCTAVES;i++) {\n    value += noise( coord ) * scale;\n    coord *= 2.0;\n  }\n\n  return value;\n}\n\nvoid main() {\n\n\tvec4 video = texture2D( u_video, ( vUv + vec2(0., 0.19) ) * vec2(1.0, 1.2) );\n\tvec2 s = u_resolution; // Screen\n\tvec2 i = vec2(853,480); // Image\n\tfloat rs = s.x / s.y;\n\tfloat ri = i.x / i.y;\n\tvec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n\tvec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n\tvec2 nUv = video.xy * s / new + offset;\n\n\t// 1 nice effect ?\n\tif ( videox ) {\n\t\tvideo = texture2D( u_video, nUv - u_mouse * 0.7 + 0.2 );\n\t}\n\n\tif ( globalvideo ) {\n\t\tnUv = gl_FragCoord.xy / u_resolution;\n\t\tnUv.y = 1. - nUv.y;\n\n\t\tvec2 coord = nUv * 1.8;\n\t\tvec2 motion = vec2( fbm(coord + vec2(u_time * 1.0, u_time * -2.0 ) ) );\n\t\tfloat final = fbm( coord + motion );\n\n\t\tvideo = texture2D( u_video, nUv * final );\n\t}\n\n\t// 2 global position\n\t// nUv = gl_FragCoord.xy / u_resolution;\n\t// video = texture2D( u_video, nUv - u_mouse );\n\n\t// vec2 nUv = distanceUV * multiplier + 0.5;\n\tgl_FragColor = vec4(0.0157, 0.0078, 0.0392, 1.0) + video * 0.05;\n}\n\n// working example\n// void main() {\n// \tvec2 nUv = vUv * 3./2.;\n// \tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n// \tvec3 color = vec3( 1.0, 1.0, 0.0 );\n// \tfloat f = texture2D( tAudioData, vec2( nUv.x, 0.0 ) ).r;\n// \tfloat i = step( nUv.y, f ) * step( f - 0.0125, nUv.y );\n\n// // \t// convert frequency to colors\n// \tvec3 col = vec3( 0., 4.0*f*(1.0-f), 1.0-f ) * f;\n\n//     // add wave form on top\t\n// \tcol += 1.0 - smoothstep( 0.0, 0.15, nUv.y );\n\n// \tgl_FragColor = vec4( vec3(col), 1.0 );\n// }\n\n// void main() {\n//   vec2 nUv = vUv - 0.5;\n//   nUv = ( vUv ) * 0.05;\n//   vec4 audio = texture2D( tAudioData, nUv );\n//   vec4 image = texture2D( u_image, vUv + audio.xy);\n//   float val = audio.x;\n//   gl_FragColor = image + image * audio;\n// \t// image - audio;\n// }\n\n// void main() {\n// \tvec2 nUv = vUv - 0.5;\n// \tvec4 col = texture2D(tAudioData, nUv);\n// \t// float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\n// \tgl_FragColor = col;\n// }\n\n// void main() {\n// \tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n// \tvec3 color = vec3( 1.0, 1.0, 0.0 );\n\n// \tfloat f = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\n\n// \tfloat i = step( vUv.y, f ) * step( f - 0.0125, vUv.y );\n\n// \tgl_FragColor = vec4( mix( backgroundColor, color, i ), 1.0 );\n// \tgl_FragColor = vec4( f, f, f, 1.0 );\n// }\n\n// void main() {\n//     // create pixel coordinates\n// \tvec2 uv = vUv;\n\n//     // the sound texture is 512x2\n//   int tx = int(uv.x*512.0);\n    \n// \t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n// \tfloat fft = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\n\n//   // second row is the sound wave, one texel is one mono sample\n//   float wave = texture2D( tAudioData, vec2( vUv.y, 0.0 ) ).x;\n\t\n// \t// convert frequency to colors\n// \tvec3 col = vec3( 0., 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n//     // add wave form on top\t\n// \tcol += 1.0 - smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n// \t// output final color\n// \tgl_FragColor = vec4(col,1.0);\n// }\n\n// void main() {\n//   vec2 nUv = vec2( vUv - 0.5 );\n//   vec2 vUvMouse = vec2( vUv.x - u_mouse.x, vUv.y - u_mouse.y);\n//   vec2 dxy = pixelSize * 2./ resolution;\n//   float circle = smoothstep(\n//     0.1,\n//     1.,\n//     dot(nUv, nUv) * 4.\n//   );\n//   vec2 pixelated = (dxy * floor( vUv / dxy ) );\n\n//   //around mouse\n//   vec2 mouseUv = nUv;\n//   mouseUv += ( pixelated - 0.5 ) * ( distance( u_mouse, mouseUv + 0.5) * 1.) * length(u_mouseSpeed) * 4.;\n\n//   //end around mouse\n\n\n//   // gl_FragColor = texture2D(tDiffuse, pixelated - circle);\n//   // gl_FragColor = texture2D( tDiffuse, vUv + nUv / 4.); // add border effect lines\n//   // gl_FragColor = texture2D( u_image, vUv + (1. - circle) * mouseUv / 4.); // dont distort center with circle\n//   gl_FragColor = texture2D( u_image, vUv - nUv * ( u_mouse )); //somehow working\n//   // gl_FragColor = texture2D( u_image, mouseUv + 0.5); //try to only apply at mouse position\n//   // gl_FragColor = vec4( circle, length(u_mouseSpeed), circle, 1.0 );\n// }\n\n// void main() {\n//     // create pixel coordinates\n// \tvec2 uv = vUv;\n\n// \t// the sound texture is 512x2\n// \tint tx = int(uv.x*512.0);\n    \n// \t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n// \tfloat fft  = texelFetch( tAudioData, ivec2(tx,0), 0 ).x; \n\n// \t// second row is the sound wave, one texel is one mono sample\n// \tfloat wave = texelFetch( tAudioData, ivec2(tx,1), 0 ).x;\n\t\n// \t// convert frequency to colors\n// \tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n//     // add wave form on top\t\n// \tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n// \t// output final color\n// \tgl_FragColor = vec4(col,1.0);\n// }\n\n//\n// Color version of: https://www.shadertoy.com/view/XlXGDf\n//\n// Based on: https://www.shadertoy.com/view/4dfSRS\n//\n\n// #define PI 3.14159\n\n// vec4 audioEq() {\n//     float vol = 0.0;\n    \n//     // bass\n//     float lows = 0.0;\n//     for(float i=0.;i<85.; i++){\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\n//         lows += v*v;\n//         vol += v*v;\n//     }\n//     lows /= 85.0;\n//     lows = sqrt(lows);\n    \n//     // mids\n//     float mids = 0.0;\n//     for(float i=85.;i<255.; i++){\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\n//         mids += v*v;\n//         vol += v*v;\n//     }\n//     mids /= 170.0;\n//     mids = sqrt(mids);\n    \n//     // treb\n//     float highs = 0.0;\n//     for(float i=255.;i<512.; i++){\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\n//         highs += v*v;\n//         vol += v*v;\n//     }\n//     highs /= 255.0;\n//     highs = sqrt(highs);\n    \n//     vol /= 512.;\n//     vol = sqrt(vol);\n    \n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\n// }\n\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\n// {\n// \tvec2 uv = fragCoord.xy / iResolution.xy;\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\n\n//     vec4 eq = audioEq();\n// \tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\n// \tfloat r = length( uv );\n// \tfloat a = 0.01 - r;\n// \tuv = vec2( theta, r );\n\n// \tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\n// \tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\n//     float y = t1 * t2 * a * 16.9;\n    \n// \tfragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       1.0); \n// }\n\n// uniform vec2 u_resolution;  // Canvas size (width,height)\n// uniform vec2 u_mouse;       // mouse position in screen pixels\n// uniform float u_time;       // Time in seconds since load\n// uniform sampler2D tAudioData;\n// uniform sampler2D u_image;\n// uniform vec2 resolution;\n\n// varying vec2 vUv;\n// varying vec3 vNormal;\n\n// float squared(float value) {\n// \treturn value * value;\n// }\n\n// float getAmp(float frequency) {\n// \treturn texture2D(tAudioData, vec2(frequency / 512.0, 0)).x;\n// }\n\n// float getWeight(float f) {\n// \treturn (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\n// }\n\n// #define P 3.14159\n// #define PI 3.14159\n// #define E .001\n\n// #define T .03 // Thickness\n// #define W 2.  // Width\n// #define A .29 // Amplitude\n// #define V 0.5  // Velocity\n\n// void main() {\n  //   gl_FragColor = vec4(vUv, 0.0, 1.0);\n  // gl_FragColor = vec4(vNormal, 1.0);\n\n\t\t\t\t// vec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n\t\t\t\t// vec3 color = vec3( 0.5, vvUv.x, vUv.y );\n\n\t\t\t\t// float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\n        // float g = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).y;\n\t\t\t\t// float i = smoothstep( vUv.x, 0.0, f );\n\n\t\t\t\t// gl_FragColor = vec4( mix( backgroundColor, color, f ), 1.0 );\n  // gl_FragColor = vec4( 0.5 + vUv.x, 0.1, 0.8, 1.0 );\n\t// gl_FragColor = texture2D( u_image, vUv + tAudioData);\n\t\t// vec2 uvTrue = gl_gl_FragCoord.xy / 30. / 20.;\n    // vec2 uv = -1.0 + 2.0 * uvTrue;\n\n    // vec2 uv = gl_gl_FragCoord.xy / u_resolution;\n    // float fft = texture2D( tAudioData, vec2(uv.x * 0.25, 1.)).x;\n    // gl_FragColor = vec4(uv * pow(fft, 2.0), 0., 1.);\n\n\t\t// float lineIntensity\t;\n    // float glowWidth = 0.1;\n    // vec3 color = vec3(0.0);\n\n\t\t// for(float i = 0.0; i < 5.0; i++) {\n\t\t// \tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\n\t\t// \tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\n\t\t// \t\t\t\t\t\t\t\t\t\tglowWidth * (2.0 - sin(u_time * 0.23)),\n\t\t// \t\t\t\t\t\t\t\t\t\tglowWidth * (2.0 - cos(u_time * 0.19)));\n\t\t// }\n\n\t// for(float i = 0.0; i < 5.0; i++) {\n        \n\t// \tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\n  //       float Y = uv.y + getWeight(squared(i) * 20.0) *\n  //           (texture(tAudioData, vec2(uvTrue.x, 1)).x - 0.5);\n  //       lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + u_time,2.0) - 1.0));\n\t// \tglowWidth = abs(lineIntensity / (150.0 * Y));\n\t// \tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\n  //                     glowWidth * (2.0 - sin(u_time * 0.23)),\n  //                     glowWidth * (2.0 - cos(u_time * 0.19)));\n\t// }\t\n\n\t// gl_FragColor = vec4(color, 1.0);\n\n\t// vec2 c = gl_gl_FragCoord.xy / 600.;\n\t// float s = texture(tAudioData, c * .5).r;\n\t// c = vec2(0, A*s*sin((c.x*W+u_time*V)* 2.5)) + (c*2.-1.);\n\t// float g = max(abs(s/(pow(c.y, 2.1*sin(s*P))))*T,\n\t// \t\t\t  abs(.1/(c.y+E)));\n\t// gl_FragColor = vec4(g*g*s*.6, g*s*.44, g*g*.7, 1);\n\n\t// vec2 uv = vUv;\n\t// uv = abs( 2.0 * ( uv - 0.5 ) );\n\n\t// float theta = 1.0 * ( 1.0 / ( PI / 2.0 ) ) * atan( uv.x, uv.y );\n\t// float r = length( uv );\n\t// float a = 0.01 - r;\n\t// uv = vec2( theta, r );\n\n\t// vec4 t1 = texture2D( tAudioData, vec2( uv[0], 0.9 ) );\n\t// vec4 t2 = texture2D( tAudioData, vec2( uv[1], 0.9 ) );\n\t// float y = t1[3] * t2[0] * a * 1500.5;\n\t// gl_FragColor = vec4( sin( y * PI ), sin( y * PI ), sin( y * PI ), 1.0 );\n// }\n\n// vec2 hash(in vec2 p) \n// {\n//     p = vec2( dot(p,vec2(127.1,311.7)),\n// \t\t\t  dot(p,vec2(299.5,783.3)) );\n\n// \treturn -1.0 + 2.0*fract(sin(p)*43758.545);\n// }\n\n// float noise(in vec2 p) \n// {\n//     vec2 p00 = floor(p);\n//     vec2 p10 = p00 + vec2(1.0, 0.0);\n//     vec2 p01 = p00 + vec2(0.5, 1.0);\n//     vec2 p11 = p00 + vec2(1.0, 1.0);\n    \n//     vec2 s = p - p00;\n    \n//     float a = dot(hash(p00), s);\n// \tfloat b = dot(hash(p10), p - p10);\n// \tfloat c = dot(hash(p01), p - p01);\n// \tfloat d = dot(hash(p11), p - p11);\n\n//     vec2 q = s*s*s*(s*(s*6.0 - 15.0) + 10.0);\n\n//     float c1 = b - a;\n//     float c2 = c - a;\n//     float c3 = d - c - b + a;\n\n//    \treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\n// }\n\n\n// float fbm(vec2 p) \n// {\n// \tfloat h = noise(p) * texture(tAudioData, vec2(0.0, 0.0)).r;\n//     h += noise(p * 2.0) * texture(tAudioData, vec2(0.25, 0.0)).r * 0.5;\n//     h += noise(p * 4.0) * texture(tAudioData, vec2(0.50, 0.0)).r * 0.25;\n//     h += noise(p * 8.0) * texture(tAudioData, vec2(0.75, 0.0)).r * 0.125;\n    \n//     return h;\n// }\n\n// // Taken from http://iquilezles.org/www/articles/palettes/palettes.htm\n// vec3 ColorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n// {\n//     return a + b*cos( 6.28318*(c*t+d) );\n// }\n\n// vec3 ContourLines(vec2 p) \n// {\n// \tfloat h = fbm(p*5.5)*10.0;\n//     float t = fract(h);\n//     float b = 1.0 - fract(h + 1.0);\n//     return ColorPalette(h*0.1,\n//                         vec3(1.0), vec3(0.7), vec3(1.0), vec3(0.0, 0.333, 0.666)) * \n//                (pow(t, 16.0) + pow(b, 4.0));\n        \n// }\n\n// vec2 Position() \n// {\n// \treturn vec2(noise(vec2(u_time*0.014)), noise(vec2(u_time*0.012))) +\n//            vec2(0.0, u_time * 0.025);\n// }\n\n// void main()\n// {\n//   vec2 p = Position() + (gl_FragCoord.xy / max(u_resolution.x, u_resolution.y));\n// \tgl_FragColor = vec4(pow(ContourLines(p), vec3(0.55)), 1.0);\n// }\n\n//\n// Color version of: https://www.shadertoy.com/view/XlXGDf\n//\n// Based on: https://www.shadertoy.com/view/4dfSRS\n//\n\n// #define PI 3.14159\n\n// vec4 audioEq() {\n//     float vol = 0.0;\n    \n//     // bass\n//     float lows = 0.0;\n//     for(float i=0.;i<85.; i++){\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\n//         lows += v*v;\n//         vol += v*v;\n//     }\n//     // lows /= 85.0;\n//     lows = sqrt(lows) * 10.;\n    \n//     // mids\n//     float mids = 0.0;\n//     for(float i=85.;i<255.; i++){\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\n//         mids += v*v;\n//         vol += v*v;\n//     }\n//     // mids /= 170.0;\n//     mids = sqrt(mids) * 10.;\n    \n//     // treb\n//     float highs = 0.0;\n//     for(float i=255.;i<512.; i++){\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\n//         highs += v*v;\n//         vol += v*v;\n//     }\n//     // highs /= 255.0;\n//     highs = sqrt(highs) * 10.;\n    \n//     // vol /= 512.;\n//     vol = sqrt(vol) * 10.;\n    \n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\n// }\n\n// void main()\n// {\n// \tvec2 uv = (vUv - 0.5) * 0.3;\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\n\n//     vec4 eq = audioEq();\n// \tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\n// \tfloat r = length( uv );\n// \tfloat a = 0.01 - r;\n// \tuv = vec2( theta, r );\n\n// \tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\n// \tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\n//   float y = t1 * t2 * a * 16.9;\n\n// \tgl_FragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       1.0); \n// }\n\n// const int numWaves = 6;\n// const float numStripes = 1.0;\n// const float numFreqs = 8.0;\n// const float meanFreq = 5.0;\n// const float stdDev = 2.0;\n// const float period = 5.0;\n// const float pi = 4.0 * atan(1.0);\n// const float pi2 = 2.0 * pi;\n// const float ln2 = log(2.0);\n// const float mean = meanFreq * .59314718;\n\n// float wavething(int n, float x){\n//     float l = ln2 * float(n) + log(x);\n//     l -= mean;\n//     return exp(-l * l / stdDev) / 2.0;\n// }\n\n// void main()\n// {\n//     gl_FragColor = vec4(0.0);\n//     float scale = exp2(-fract(u_time / period));\n//     float sum1 = 0.0;\n//     for(int n = 0; n < int(numFreqs); n++){\n//         sum1 += wavething(n, scale);\n//     }\n//     vec2 xy = pi2 * numStripes\n//         * ((2.0 * gl_FragCoord.xy - u_resolution.xy) / u_resolution.y);\n    \n//     float sum2 = 0.0;\n//     for(int n = 0; n < numWaves; n++){\n//         float theta = pi * float(n) / float(numWaves);\n//         vec2 waveVec = vec2(cos(theta), sin(theta));\n//         float phase = dot(xy, waveVec);\n//         for(int k = 0; k < int(numFreqs); k++){\n//             sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\n//         }\n//     }\n//     gl_FragColor += vec4(1.0 - sum2 / sum1);\n//     xy /= pi2 * numStripes;\n//     float r = length(xy) * 0.35;\n//     if(sum2 / sum1 < .5){\n//         gl_FragColor.x *= 2.0;\n//         gl_FragColor.y *= texture(tAudioData, vec2(.161616 * r + .161616, .2)).x;\n//         gl_FragColor.z *= texture(tAudioData, vec2(.161616 * r + .333333, .2)).x;\n//         gl_FragColor = 1.0 - gl_FragColor;\n//     }\n//     // gl_FragColor = 1.0 - (r + 1.0) * gl_FragColor;\n//     // if(length(gl_FragColor) > 3.0) gl_FragColor = vec4(0.0);\n// }\n\n"},3222:function(t,n,e){"use strict";e(2675),e(9463),e(2259),e(5700),e(3418),e(4423),e(3792),e(2062),e(4782),e(9572),e(2010),e(2892),e(9868),e(9085),e(6099),e(7495),e(8781),e(1699),e(7764),e(3500),e(2953);var o=e(9437),i=e(7024),a=e(7888),s=e(1728),r=e(7439),l=e(5804),u=e(1185),c=e(8383),v=e(9715),d=e(9631);function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function f(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,m(o.key),o)}}function m(t){var n=function(t){if("object"!=h(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var e=n.call(t,"string");if("object"!=h(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==h(n)?n:n+""}var p=function(){return t=function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.object=n,this.prop=e},(n=[{key:"value",get:function(){return"#".concat(this.object[this.prop].getHexString())},set:function(t){this.object[this.prop].set(t)}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n}(),g=e(5150),x=e.n(g),y=e(2362),w=e.n(y),b=e(6644),C=e.n(b),_=e(1856),P=e.n(_),D=e(2131),U={uniforms:{tDiffuse:{value:null},opacity:{value:1},amount:{type:"f",value:0},angle:{type:"f",value:0},dattime:{type:"f",value:0},strength:{type:"f",value:.4},radius:{type:"f",value:.15},power:{type:"f",value:1},threshold:{type:"f",value:.05},smoothWidth:{type:"f",value:.31},gamma:{type:"f",value:1},vignfalloff:{type:"f",value:.2},vignamount:{type:"f",value:.4},postcolor:{value:!0},postfilm:{value:!0},tInput:{value:null}},vertexShader:"\n\t\tvarying vec2 vUv;\n\t\tvarying vec2 vUv2;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t}",fragmentShader:e.n(D)()},L=e.p+"src/models/club/reduce.glb",A=(e.p,e.p+"tdvr_teaser_for_web_1_sm.mp4");function S(t){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function F(t){return function(t){if(Array.isArray(t))return q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return q(t,n);var e={}.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?q(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}function I(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,T(o.key),o)}}function T(t){var n=function(t){if("object"!=S(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var e=n.call(t,"string");if("object"!=S(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==S(n)?n:n+""}e.p;var M=function(){return t=function t(n){var e;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.loadModels.bind(this),this.loadAudio.bind(this),this.clock=new o.zD7,this.time=0,this.scroll=0,this.scrollTarget=0,this.direction=1,this.scrollPercentage=0,this.screens=[],this.appParams={state:"start",exposure:1.1,bloomStrength:.234,bloomThreshold:.3,bloomRadius:.22,audioLoaded:!1,audioPlaying:!1,isAppleDevice:/(iPad|iPhone|iPod)/g.test(navigator.userAgent),ambLight:{color:"#5e68b0",intensity:2},analyserIndex:27,analyserIntensity:241,dirLight1:{color:"#181d5d",intensity:1,position:{x:0,y:-15.12,z:20.96},target:{position:{x:0,y:-7.8,z:-20}}},dirLight2:{color:"#2d4d74",intensity:.15,position:{x:0,y:4.28,z:-3.6},target:{position:{x:0,y:1.8,z:.32}}},spotLight1:{color:"#ffffff",intensity:3,distance:76,penumbra:.8,angle:.77,position:{x:0,y:7.6515,z:-19.851},target:{position:{x:0,y:4.094,z:-20.6}}},fx:{smokeCol:[.81,.84,1]},video:2,videox:!0,globalvideo:!0,is3d:!0,directionalLightIntensity:.2,envMapIntensity:.1,light:{},postglitch:!1,postcolor:!0,postfilm:!0},this.screenUniforms={},this.loadingDiv=document.getElementById("loader"),this.container=n.dom,this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.mouse=new o.I9Y(0,0),this.mouseSpeed=new o.I9Y(0,0),this.oldMouseSpeed=new o.I9Y(0,0),this.mouseAcc=new o.I9Y(0,0),this.lMouseSpeed=new o.I9Y(0,0),this.lMouse=new o.I9Y(0,0),this.camPos=new o.Pq0(0,0,0),this.pultPos=new o.Pq0(0,4.8,-22),this.mouseX=0,this.mouseY=0,this.mouseTargetX=0,this.mouseTargetY=0,this.playBackSpeed=500,this.logo=document.querySelector(".bottom-logo"),this.currentLogo=1,this.nav=document.querySelector(".navbar-nav"),this.currentMode=0,this.modes=["normal","difference","color-dodge"],this.lerp=.1,this.time=0,this.vid=document.querySelector("#bgvid"),this.horizontalContainer=document.querySelector(".horizontal-container"),this.hciScroll=null,this.faderContainer=document.querySelector(".fader"),this.faderScroll=null,this.lastScrollPos=0,this.scrollTarget=0,this.isScrolling=!1,this.mouseWX=10,this.mouseWY=10,this.mouseTargetWX=10,this.mouseTargetWY=10,this.relX=0,this.relY=0,this.smoothness=.1,this.smoothnessTarget=.1,this.isOverFogEl=!1,this.isOverInteractive=!1,this.g_containerInViewport=!1,this.scene=new o.Z58,this.camera=new o.ubm(40,this.width/this.height,.01,70),this.initialCameraPosition=new o.Pq0(0,7,26),this.initialCameraTarget=new o.Pq0(0,8,0);var a=!0;window.devicePixelRatio>1&&(a=!1),this.renderer=new o.JeP({antialias:a,autoClear:!0,powerPreference:"high-performance"}),this.renderer.setSize(this.width,this.height),this.container.appendChild(this.renderer.domElement),this.controls=new i.N(this.camera,this.renderer.domElement),(e=this.controls.object.position).set.apply(e,F(this.initialCameraPosition)),this.controls.target=new o.Pq0(0,4,-30),this.controls.update(),this.setupLoading(),this.setupListeners(),this.loadModels(),this.addLights(),this.addObjects(),this.addComposer(),this.render(),this.resize()},n=[{key:"setState",value:function(t){this.onChageState(t),this.appParams.state=t}},{key:"onChageState",value:function(t){var n=this;switch(t){case"start":case"no3d":break;case"playing":playbutton.classList.toggle("out"),document.body.style.position="inherit",this.appParams.audioLoaded||(this.loadAudio(),this.appParams.audioLoaded=!0,window.scrollTo({top:this.height,behavior:"smooth"})),this.screenMaterial=new o.BKk({uniforms:this.screenUniforms,vertexShader:P(),fragmentShader:x()}),this.screens.forEach(function(t){t.material=n.screenMaterial,t.material.needsUpdate=!0}),F(document.querySelectorAll(".f-in")).forEach(function(t){t.style.opacity=1}),new v.A.Tween(this.amblight).to({intensity:1.8},1e3).start(),playbutton.classList.toggle("paused");break;case"paused":playbutton.classList.toggle("paused")}}},{key:"addGUI",value:function(){var t=this;this.gui=new d.Ay;var n=this,e=this.gui.addFolder("Bloom").close();e.add(this.appParams,"exposure",.1,2).onChange(function(t){n.renderer.toneMappingExposure=Math.pow(t,4)}),e.add(this.appParams,"bloomThreshold",0,1).onChange(function(t){n.bloomPass.threshold=Number(t)}),e.add(this.appParams,"bloomStrength",0,3).onChange(function(t){n.bloomPass.strength=Number(t)}),e.add(this.appParams,"bloomRadius",0,1).step(.01).onChange(function(t){n.bloomPass.radius=Number(t)});var o=this.gui.addFolder("Lights").close();o.add(this.appParams.ambLight,"intensity",0,10).name("ambientintensity").onChange(function(t){n.amblight.intensity=t}),o.addColor(new p(this.amblight,"color"),"value").name("Ambient Color");var i=o.addFolder("Directional Light 1").close();i.addColor(new p(this.dirLight1,"color"),"value").name("Color"),i.add(this.appParams.dirLight1,"intensity",0,1).onChange(function(n){return t.dirLight1.intensity=n}),i.add(this.appParams.dirLight1.position,"y",-40,40).name("y").onChange(function(n){return t.dirLight1.position.setY(n)}),i.add(this.appParams.dirLight1.position,"z",-40,40).name("z").onChange(function(n){return t.dirLight1.position.setZ(n)}),i.add(this.appParams.dirLight1.target.position,"y",-40,40).name("target y").onChange(function(n){return t.dirLight1.target.position.setY(n)}),i.add(this.appParams.dirLight1.target.position,"z",-40,40).name("target z").onChange(function(n){return t.dirLight1.target.position.setZ(n)});var a=o.addFolder("Directional Light 2").close();a.addColor(new p(this.dirLight2,"color"),"value").name("Dir Light 2"),a.add(this.appParams.dirLight2,"intensity",0,1).onChange(function(n){return t.dirLight2.intensity=n}),a.add(this.appParams.dirLight2.position,"x",-20,20).name("x").onChange(function(n){return t.dirLight2.position.setX(n)}),a.add(this.appParams.dirLight2.position,"y",-20,20).name("y").onChange(function(n){return t.dirLight2.position.setY(n)}),a.add(this.appParams.dirLight2.position,"z",-20,20).name("z").onChange(function(n){return t.dirLight2.position.setZ(n)}),a.add(this.appParams.dirLight2.target.position,"x",-20,20).name("target x").onChange(function(n){return t.dirLight2.target.position.setX(n)}),a.add(this.appParams.dirLight2.target.position,"y",-20,20).name("target y").onChange(function(n){return t.dirLight2.target.position.setY(n)}),a.add(this.appParams.dirLight2.target.position,"z",-20,20).name("target z").onChange(function(n){return t.dirLight2.target.position.setZ(n)});var s=o.addFolder("Spot Light").close();s.addColor(new p(this.spotLight1,"color"),"value").name("Spot Light"),s.add(this.appParams.spotLight1,"intensity",0,3).onChange(function(n){return t.spotLight1.intensity=n}),s.add(this.appParams.spotLight1,"distance",0,100).onChange(function(n){return t.spotLight1.distance=n}),s.add(this.appParams.spotLight1,"penumbra",0,1).onChange(function(n){return t.spotLight1.penumbra=n}),s.add(this.appParams.spotLight1,"angle",0,2*Math.PI).onChange(function(n){return t.spotLight1.angle=n}),s.add(this.appParams.spotLight1.position,"x",-25,20).name("x").onChange(function(n){return t.spotLight1.position.setX(n)}),s.add(this.appParams.spotLight1.position,"y",-25,20).name("y").onChange(function(n){return t.spotLight1.position.setY(n)}),s.add(this.appParams.spotLight1.position,"z",-25,20).name("z").onChange(function(n){return t.spotLight1.position.setZ(n)}),s.add(this.appParams.spotLight1.target.position,"x",-25,20).name("target x").onChange(function(n){return t.spotLight1.target.position.setX(n)}),s.add(this.appParams.spotLight1.target.position,"y",-25,20).name("target y").onChange(function(n){return t.spotLight1.target.position.setY(n)}),s.add(this.appParams.spotLight1.target.position,"z",-25,20).name("target z").onChange(function(n){return t.spotLight1.target.position.setZ(n)}),s.add(this.appParams,"analyserIndex",0,254).step(1).name("beat index").onChange(function(n){return t.appParams.analyserIndex=n}),s.add(this.appParams,"analyserIntensity",0,1e3).step(1).name("beat intensity").onChange(function(n){return t.appParams.analyserIntensity=n});var r=this.gui.addFolder("Video").close();r.add(this.appParams,"is3d").onChange(function(n){t.container.style.display=n?"block":"none"}),r.add(this.appParams,"videox").onChange(function(n){t.screenUniforms.videox.value=n}),r.add(this.appParams,"globalvideo").onChange(function(n){t.screenUniforms.globalvideo.value=n});var l=this.gui.addFolder("Postprocessing").close();l.add(this.appParams,"postcolor").name("Colorstorm").onChange(function(n){t.tdvrPass.uniforms.postcolor.value=n}),l.add(this.appParams,"postfilm").name("Film").onChange(function(n){t.tdvrPass.uniforms.postfilm.value=n}),this.gui.addFolder("fx").addColor(this.appParams.fx,"smokeCol").name("Smoke Color").onChange(function(n){t.followMousePass.uniforms.newCol.value=n}),this.gui.close()}},{key:"setupLoading",value:function(){var t=this;this.loadingManager=new o.KPJ,this.loadingManager.onStart=function(t,n,e){},this.loadingManager.onLoad=function(){void 0!==t.loadingDiv&&t.loadingDiv.classList.add("hidden"),document.body.classList.contains("newsroom")&&(document.body.style.position="inherit")},this.loadingManager.onError=function(t){console.log("There was an error loading "+t),this.appParams.is3d=!1}}},{key:"setupListeners",value:function(){var t,n,e,o,i,a=this;document.addEventListener("mousemove",this.onMouseMove.bind(this)),window.addEventListener("resize",this.resize.bind(this)),F(document.querySelectorAll(".has-fog")).map(function(t){t.addEventListener("mouseenter",a.onMouseEnter.bind(a)),t.addEventListener("mouseleave",a.onMouseLeave.bind(a))}),t=function(t){a.scrollPercentage=t.toFixed(3),a.mouseWX*=.9,a.mouseWY*=.9},n=document.documentElement,e=document.body,window.addEventListener("scroll",function(){t((n.scrollTop||e.scrollTop)/((n.scrollHeight||e.scrollHeight)-n.clientHeight))}),o=function(t){a.direction=a.scroll>0?-1:1,a.scrollTarget=t},i=0,document.addEventListener("wheel",function(t){i=t.deltaY/3,o(i)});var s=document.getElementById("playbutton"),r=this;s&&s.addEventListener("click",function(){var t,n,e,o,i,s,l;"playing"!==a.appParams.state?a.setState("playing"):a.setState("paused"),a.appParams.audioPlaying?(null===(o=r.audio)||void 0===o||o.pause(),null===(i=r.mediaElement)||void 0===i||i.pause(),r.appParams.audioPlaying=!1):(r.appParams.audioPlaying=!0,a.appParams.isAppleDevice?null===(s=r.audio)||void 0===s||s.play():null===(l=r.mediaElement)||void 0===l||l.play(),new v.A.Tween({x:0}).to({x:.2},5e3).onUpdate(function(t){r.audio.setVolume(t.x)}).start()),null!==(t=r.video)&&void 0!==t&&t.isPlaying?null===(n=r.video)||void 0===n||n.pause():null===(e=r.video)||void 0===e||e.play()})}},{key:"resize",value:function(){var t;this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,null===(t=this.composer)||void 0===t||t.setSize(this.width,this.height),this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix(),this.screenUniforms&&(this.screenUniforms.u_resolution.value=new o.I9Y(this.width,this.height))}},{key:"loadAudio",value:function(){var t=new o.Pf$;if(this.audio=new o.fP5(t),this.fftSize=128,/(iPad|iPhone|iPod)/g.test(navigator.userAgent)){var n=this;(new o.Am1).load("../../public/TheDistrictVR.mp3",function(t){n.audio.setBuffer(t),n.audio.setLoop(!0),n.audio.setVolume(0),n.audio.play()})}else this.mediaElement=document.getElementById("beat"),this.mediaElement.loop=!0,this.audio.setMediaElementSource(this.mediaElement),this.audio.setVolume(0);this.analyser=new o.CwR(this.audio,this.fftSize),this.analyser.analyser.smoothingTimeConstant=.9,this.audioFormat=o.Kzv,this.screenUniforms.tAudioData={value:new o.GYF(this.analyser.data,this.fftSize/2,1,this.audioFormat)}}},{key:"loadModels",value:function(){var t=this;this.video=document.getElementById("bgvid"),this.video.src=A,this.video.load(),this.vTexture=new o.Nv2(this.video),this.vTexture.format=o.GWd,this.screenUniforms={u_time:{value:0},u_resolution:{value:new o.I9Y(this.width,this.height)},u_mouse:{value:new o.I9Y(this.width/2,this.height/2)},u_video:{value:this.vTexture},tAudioData:{value:new o.GYF},videox:{value:!0},globalvideo:{value:!0},postfilm:{value:!0},postglitch:{value:!1},postcolor:{value:!0}},this.screenMaterial=new o.V9B({color:10066329}),this.floorMaterial=new o.BKk({uniforms:this.screenUniforms,vertexShader:P(),fragmentShader:w(),transparent:!0});var n=new s.Z;this.loader=new a.B(this.loadingManager),this.loader.setDRACOLoader(n),t.lights=[],n.setDecoderConfig({type:"js"}),n.setDecoderPath("https://www.gstatic.com/draco/v1/decoders/"),t.loader=new a.B(t.loadingManager),t.loader.setDRACOLoader(n),t.loader.load(L,function(n){n.scene.traverse(function(n){n.isMesh&&n.name.includes("DJ_Controller")&&(n.frustumCulled=!1),n.name.includes("HandRef")&&(n.visible=!1),n.name.includes("Truss")&&n.traverse(function(t){t.material=new o._4j({color:new o.Q1f(263172),emissive:new o.Q1f(0)})}),n.name.includes("WallScreen")&&n.traverse(function(n){n.material=t.screenMaterial,n.castShadow=!1,n.material.needsUpdate=!0,t.screens.push(n)})}),n.scene.position.set(-6.25,0,0),t.scene.add(n.scene)})}},{key:"addLights",value:function(){new o.Q1f(7829503),this.amblight=new o.$p8(this.appParams.ambLight.color,this.appParams.ambLight.intensity),this.scene.add(this.amblight),this.dirLight1=new o.ZyN(this.appParams.dirLight1.color,this.appParams.dirLight1.intensity),this.dirLight1.position.set(this.appParams.dirLight1.position.x,this.appParams.dirLight1.position.y,this.appParams.dirLight1.position.z),this.dirLight1.target.position.set(this.appParams.dirLight1.target.position.x,this.appParams.dirLight1.target.position.y,this.appParams.dirLight1.target.position.z),this.scene.add(this.dirLight1),this.scene.add(this.dirLight1.target),this.dirLight2=new o.ZyN(this.appParams.dirLight2.color,this.appParams.dirLight2.intensity),this.dirLight2.position.set(this.appParams.dirLight2.position.x,this.appParams.dirLight2.position.y,this.appParams.dirLight2.position.z),this.dirLight2.target.position.set(this.appParams.dirLight2.target.position.x,this.appParams.dirLight2.target.position.y,this.appParams.dirLight2.target.position.z),this.scene.add(this.dirLight2),this.scene.add(this.dirLight2.target),this.spotLight1=new o.nCl(16777215,1),this.spotLight1.position.set(this.appParams.spotLight1.position.x,this.appParams.spotLight1.position.y,this.appParams.spotLight1.position.z),this.spotLight1.angle=this.appParams.spotLight1.angle,this.spotLight1.intensity=this.appParams.spotLight1.intensity,this.spotLight1.penumbra=this.appParams.spotLight1.penumbra,this.spotLight1.decay=1,this.spotLight1.distance=this.appParams.spotLight1.distance,this.spotLight1.castShadow=!1,this.scene.add(this.spotLight1),this.spotLight1.target.position.set(this.appParams.spotLight1.target.position.x,this.appParams.spotLight1.target.position.y,this.appParams.spotLight1.target.position.z),this.scene.add(this.spotLight1.target)}},{key:"addObjects",value:function(){var t=[];t.push(this.initialCameraPosition),t.push(new o.Pq0(0,6,17)),t.push(new o.Pq0(0,6,7)),t.push(new o.Pq0(6,6,-8)),t.push(new o.Pq0(4,6,-20)),t.push(new o.Pq0(0,5,-25)),t.push(new o.Pq0(0,5.5,-22)),this.camCurve=new o.B6O(t)}},{key:"addComposer",value:function(){this.composer=new r.s0(this.renderer),this.composer.addPass(new l.A(this.scene,this.camera)),this.followMouseShader={uniforms:{u_time:{value:0},tDiffuse:{value:null},u_mouse:{value:new o.I9Y(0,0)},u_resolution:{value:new o.I9Y(this.width,this.height)},mWidth:{value:400},mHeight:{value:400},smoothness:{value:.1},newCol:{value:new o.Pq0(.81,.84,1)}},vertexShader:P(),fragmentShader:C()},this.followMousePass=new u.p(this.followMouseShader),this.composer.addPass(this.followMousePass),this.bloomPass=new c.C(new o.I9Y(window.innerWidth,window.innerHeight),1.5,.4,.85),this.bloomPass.threshold=this.appParams.bloomThreshold,this.bloomPass.strength=this.appParams.bloomStrength,this.bloomPass.radius=this.appParams.bloomRadius,this.composer.addPass(this.bloomPass),this.tdvrPass=new u.p(U),this.composer.addPass(this.tdvrPass)}},{key:"onMouseEnter",value:function(t){this.isOverFogEl=!0,this.fogEl=t.target}},{key:"onMouseLeave",value:function(){this.isOverFogEl=!1,this.fogEl=null}},{key:"updateScrollContainer",value:function(){if(this.horizontalContainer&&0===this.horizontalContainer.getBoundingClientRect().top){null===this.hciScroll&&(this.hciScroll=window.scrollY);var t=this.hciScroll-window.scrollY;this.horizontalContainer.style.transform="translate3d(".concat(t,"px, 0, 0 )")}if(this.faderContainer){var n=this.faderContainer.querySelector(".camera"),e=F(this.faderContainer.querySelectorAll(".item"));if(0===n.getBoundingClientRect().top){null===this.faderScroll&&(this.faderScroll=window.scrollY);var o=-(this.faderScroll-window.scrollY)/(this.faderContainer.getBoundingClientRect().height-n.getBoundingClientRect().height)*3;e.forEach(function(t,n){var e=200*-(o+1-(n+1));t.style.opacity=1-3*Math.pow(o+1-(n+1),4),t.style.transform="translate3d(-50%, ".concat(e-50,"%,0)")})}}}},{key:"onMouseMove",value:function(t){this.oldMouse=this.mouse,this.mouse=new o.I9Y(t.clientX/this.width,(this.height-t.clientY)/this.height),this.oldMouseSpeed=this.mouseSpeed,this.mouseSpeed=new o.I9Y(Math.abs(Math.min(10*(this.mouse.x-this.oldMouse.x),1)),Math.abs(Math.min(10*(this.mouse.y-this.oldMouse.y)),1)),this.mouseAcc=new o.I9Y(this.mouse.x-t.clientX-this.mouseSpeed.x,this.mouse.y-this.height+t.clientY-this.mouseSpeed.y),this.mouseX=t.clientX,this.mouseY=t.clientY,this.isOverFogEl&&this.fogEl?(this.mouseWX=.3*this.fogEl.clientWidth,this.mouseWY=.6*this.fogEl.clientHeight,this.smoothness=.2,this.lerp=.05):(this.mouseWX=1,this.mouseWY=1,this.smoothness=.001,this.lerp=.05)}},{key:"updateMouse",value:function(){this.lMouse.x-=.1*(this.lMouse.x-this.mouse.x),this.lMouse.y-=.1*(this.lMouse.y-this.mouse.y),this.mouseTargetX-=(this.mouseTargetX-this.mouseX)*this.lerp,this.mouseTargetY-=(this.mouseTargetY-this.mouseY)*this.lerp,this.mouseTargetWX-=(this.mouseTargetWX-this.mouseWX)*this.lerp,this.mouseTargetWY-=(this.mouseTargetWY-this.mouseWY)*this.lerp,this.smoothnessTarget-=(this.smoothnessTarget-this.smoothness)*this.lerp/2,this.scrollTarget-=(this.scrollTarget-this.lastScrollPos)*this.lerp,this.followMousePass.uniforms.u_mouse.value=this.lMouse,this.followMousePass.uniforms.mWidth.value=this.mouseTargetWX,this.followMousePass.uniforms.mHeight.value=this.mouseTargetWY,this.followMousePass.uniforms.smoothness.value=this.smoothnessTarget}},{key:"render",value:function(){var t;this.time+=.05,this.controls.update(),v.A.update(),this.updateMouse(),this.updateScrollContainer(),this.tdvrPass.uniforms.dattime.value+=.012,this.tdvrPass.uniforms.dattime.value>6.5&&(this.tdvrPass.uniforms.dattime.value=-1),this.analyser&&this.dirLight1&&(this.analyser.getFrequencyData(),this.dirLight1.intensity=Math.pow(this.analyser.data[this.appParams.analyserIndex]/1e4*this.appParams.analyserIntensity,1),this.screenUniforms.u_time.value=.025*this.time,this.screenUniforms.tAudioData.value.needsUpdate=!0),this.followMousePass.uniforms.u_time.value=.025*this.time;var n=this.scrollPercentage;n<0?n=0:n>1&&(n=1);try{this.camCurve.getPoint(n,this.camPos)}catch(t){}this.camera.lookAt(this.pultPos),Object.assign(this.camPos,{x:this.camPos.x-Math.sin(.5*Math.PI*(this.mouse.x-.5)),y:this.camPos.y+Math.sin(.25*Math.PI*(this.mouse.y-.5)),z:this.camPos.z-Math.cos(.5*Math.PI*(this.mouse.x-.5))}),(t=this.camera.position).set.apply(t,F(this.camPos)),this.scroll-=.005*(this.scroll-this.scrollTarget),this.scroll*=.9,this.appParams.is3d&&this.composer.render(this.scene,this.camera),window.requestAnimationFrame(this.render.bind(this))}}],n&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,n}(),z=(e(8598),e(4554),e(3362),e(778),e(9336)),k=e(5914);function W(t){return function(t){if(Array.isArray(t))return E(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,n){if(t){if("string"==typeof t)return E(t,n);var e={}.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?E(t,n):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=Array(n);e<n;e++)o[e]=t[e];return o}function Y(){var t=document.querySelector(".medium-posts"),n=document.querySelector("button.hamburger"),e=document.querySelector(".mobile-menu"),o=null==e?void 0:e.querySelectorAll("a");o&&W(o).forEach(function(t){t.addEventListener("click",function(){e.classList.remove("open"),n.classList.remove("is-active")})}),null==n||n.addEventListener("click",function(){n.classList.toggle("is-active"),e.classList.toggle("open")});t&&fetch("https://api.rss2json.com/v1/api.json?rss_url=https://medium.com/feed/thedistrictvr").then(function(t){return t.json()}).then(function(n){return function(n){var e=W(t.querySelectorAll(".post"));n.items.splice(2),W(n.items).forEach(function(t,n){!function(t,n){if(t){var e=t.querySelector("img"),o=t.querySelector("h4"),i=t.querySelector(".description"),a=t.querySelector(".more a"),s=t.querySelector(".categories"),r=t.querySelector(".post-date");e.src=n.thumbnail,o.innerHTML=n.title,a.href=n.link,i.innerHTML=n.description;var l=i.querySelector("p:first-of-type");i.innerHTML=l.innerHTML,s.innerHTML=n.categories.join(", "),r.innerHTML=n.pubDate?new Date(n.pubDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):""}}(e[n],t)})}(n)}).catch(function(){t.querySelector(".post-wrap")&&(t.querySelector(".post-wrap").innerHTML='<div class="col text-center" style="color: var(--color-secondary)"><p>Error getting posts from Medium, please try again later or navigate to medium directly with the link below.<p></div>')}),new z.I6(document.body,{target:"#main-nav"}),new k.Ay(".swiper",{modules:[k.Vx,k.dK],loop:!0,preloadImages:!1,lazy:!0,pagination:{el:".swiper-pagination",clickable:!0},on:{click:function(t){t.slideNext()}}}),window.cookieconsent.initialise({palette:{popup:{background:"#000a",text:"#0f0"},button:{background:"transparent",text:"#0f0",border:"#0f0"}},position:"bottom-right"})}e(1422),e.p,document.addEventListener("DOMContentLoaded",function(){new M({dom:document.getElementById("threejs-container")}),new Y},!1)},5150:function(t){t.exports="uniform vec2 u_resolution;  // Canvas size (width,height)\nuniform vec2 u_mouse;       // mouse position in screen pixels\nuniform float u_time;       // Time in seconds since load\nuniform sampler2D u_image;\nuniform sampler2D tAudioData;\nuniform sampler2D u_video;\nuniform bool videox;\nuniform bool globalvideo;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\nvoid main() {\n\n\tvec4 video = texture2D( u_video, ( vUv + vec2(0., 0.19) ) * vec2(1.0, 1.2) );\n\tvec2 s = u_resolution; // Screen\n\tvec2 i = vec2(853,480); // Image\n\tfloat rs = s.x / s.y;\n\tfloat ri = i.x / i.y;\n\tvec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n\tvec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n\tvec2 nUv = video.xy * s / new + offset;\n\n\t// 1 nice effect ?\n\tif ( videox ) {\n\t\tvideo = texture2D( u_video, nUv - u_mouse * 0.7 + 0.2 );\n\t}\n\n\tif ( globalvideo ) {\n\t\tnUv = gl_FragCoord.xy / u_resolution;\n\t\tvideo = texture2D( u_video, nUv );\n\t}\n\n\t// 2 global position\n\t// nUv = gl_FragCoord.xy / u_resolution;\n\t// video = texture2D( u_video, nUv - u_mouse );\n\n\t// vec2 nUv = distanceUV * multiplier + 0.5;\n\t\n\tgl_FragColor = video;\n}\n\n// working example\n// void main() {\n// \tvec2 nUv = vUv * 3./2.;\n// \tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n// \tvec3 color = vec3( 1.0, 1.0, 0.0 );\n// \tfloat f = texture2D( tAudioData, vec2( nUv.x, 0.0 ) ).r;\n// \tfloat i = step( nUv.y, f ) * step( f - 0.0125, nUv.y );\n\n// // \t// convert frequency to colors\n// \tvec3 col = vec3( 0., 4.0*f*(1.0-f), 1.0-f ) * f;\n\n//     // add wave form on top\t\n// \tcol += 1.0 - smoothstep( 0.0, 0.15, nUv.y );\n\n// \tgl_FragColor = vec4( vec3(col), 1.0 );\n// }\n\n// void main() {\n//   vec2 nUv = vUv - 0.5;\n//   nUv = ( vUv ) * 0.05;\n//   vec4 audio = texture2D( tAudioData, nUv );\n//   vec4 image = texture2D( u_image, vUv + audio.xy);\n//   float val = audio.x;\n//   gl_FragColor = image + image * audio;\n// \t// image - audio;\n// }\n\n// void main() {\n// \tvec2 nUv = vUv - 0.5;\n// \tvec4 col = texture2D(tAudioData, nUv);\n// \t// float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\n// \tgl_FragColor = col;\n// }\n\n// void main() {\n// \tvec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n// \tvec3 color = vec3( 1.0, 1.0, 0.0 );\n\n// \tfloat f = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\n\n// \tfloat i = step( vUv.y, f ) * step( f - 0.0125, vUv.y );\n\n// \tgl_FragColor = vec4( mix( backgroundColor, color, i ), 1.0 );\n// \tgl_FragColor = vec4( f, f, f, 1.0 );\n// }\n\n// void main() {\n//     // create pixel coordinates\n// \tvec2 uv = vUv;\n\n//     // the sound texture is 512x2\n//   int tx = int(uv.x*512.0);\n    \n// \t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n// \tfloat fft = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).r;\n\n//   // second row is the sound wave, one texel is one mono sample\n//   float wave = texture2D( tAudioData, vec2( vUv.y, 0.0 ) ).x;\n\t\n// \t// convert frequency to colors\n// \tvec3 col = vec3( 0., 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n//     // add wave form on top\t\n// \tcol += 1.0 - smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n// \t// output final color\n// \tgl_FragColor = vec4(col,1.0);\n// }\n\n// void main() {\n//   vec2 nUv = vec2( vUv - 0.5 );\n//   vec2 vUvMouse = vec2( vUv.x - u_mouse.x, vUv.y - u_mouse.y);\n//   vec2 dxy = pixelSize * 2./ resolution;\n//   float circle = smoothstep(\n//     0.1,\n//     1.,\n//     dot(nUv, nUv) * 4.\n//   );\n//   vec2 pixelated = (dxy * floor( vUv / dxy ) );\n\n//   //around mouse\n//   vec2 mouseUv = nUv;\n//   mouseUv += ( pixelated - 0.5 ) * ( distance( u_mouse, mouseUv + 0.5) * 1.) * length(u_mouseSpeed) * 4.;\n\n//   //end around mouse\n\n\n//   // gl_FragColor = texture2D(tDiffuse, pixelated - circle);\n//   // gl_FragColor = texture2D( tDiffuse, vUv + nUv / 4.); // add border effect lines\n//   // gl_FragColor = texture2D( u_image, vUv + (1. - circle) * mouseUv / 4.); // dont distort center with circle\n//   gl_FragColor = texture2D( u_image, vUv - nUv * ( u_mouse )); //somehow working\n//   // gl_FragColor = texture2D( u_image, mouseUv + 0.5); //try to only apply at mouse position\n//   // gl_FragColor = vec4( circle, length(u_mouseSpeed), circle, 1.0 );\n// }\n\n// void main() {\n//     // create pixel coordinates\n// \tvec2 uv = vUv;\n\n// \t// the sound texture is 512x2\n// \tint tx = int(uv.x*512.0);\n    \n// \t// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n// \tfloat fft  = texelFetch( tAudioData, ivec2(tx,0), 0 ).x; \n\n// \t// second row is the sound wave, one texel is one mono sample\n// \tfloat wave = texelFetch( tAudioData, ivec2(tx,1), 0 ).x;\n\t\n// \t// convert frequency to colors\n// \tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n//     // add wave form on top\t\n// \tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n// \t// output final color\n// \tgl_FragColor = vec4(col,1.0);\n// }\n\n//\n// Color version of: https://www.shadertoy.com/view/XlXGDf\n//\n// Based on: https://www.shadertoy.com/view/4dfSRS\n//\n\n// #define PI 3.14159\n\n// vec4 audioEq() {\n//     float vol = 0.0;\n    \n//     // bass\n//     float lows = 0.0;\n//     for(float i=0.;i<85.; i++){\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\n//         lows += v*v;\n//         vol += v*v;\n//     }\n//     lows /= 85.0;\n//     lows = sqrt(lows);\n    \n//     // mids\n//     float mids = 0.0;\n//     for(float i=85.;i<255.; i++){\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\n//         mids += v*v;\n//         vol += v*v;\n//     }\n//     mids /= 170.0;\n//     mids = sqrt(mids);\n    \n//     // treb\n//     float highs = 0.0;\n//     for(float i=255.;i<512.; i++){\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\n//         highs += v*v;\n//         vol += v*v;\n//     }\n//     highs /= 255.0;\n//     highs = sqrt(highs);\n    \n//     vol /= 512.;\n//     vol = sqrt(vol);\n    \n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\n// }\n\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\n// {\n// \tvec2 uv = fragCoord.xy / iResolution.xy;\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\n\n//     vec4 eq = audioEq();\n// \tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\n// \tfloat r = length( uv );\n// \tfloat a = 0.01 - r;\n// \tuv = vec2( theta, r );\n\n// \tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\n// \tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\n//     float y = t1 * t2 * a * 16.9;\n    \n// \tfragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       1.0); \n// }\n\n// uniform vec2 u_resolution;  // Canvas size (width,height)\n// uniform vec2 u_mouse;       // mouse position in screen pixels\n// uniform float u_time;       // Time in seconds since load\n// uniform sampler2D tAudioData;\n// uniform sampler2D u_image;\n// uniform vec2 resolution;\n\n// varying vec2 vUv;\n// varying vec3 vNormal;\n\n// float squared(float value) {\n// \treturn value * value;\n// }\n\n// float getAmp(float frequency) {\n// \treturn texture2D(tAudioData, vec2(frequency / 512.0, 0)).x;\n// }\n\n// float getWeight(float f) {\n// \treturn (+ getAmp(f-2.0) + getAmp(f-1.0) + getAmp(f+2.0) + getAmp(f+1.0) + getAmp(f)) / 5.0;\n// }\n\n// #define P 3.14159\n// #define PI 3.14159\n// #define E .001\n\n// #define T .03 // Thickness\n// #define W 2.  // Width\n// #define A .29 // Amplitude\n// #define V 0.5  // Velocity\n\n// void main() {\n  //   gl_FragColor = vec4(vUv, 0.0, 1.0);\n  // gl_FragColor = vec4(vNormal, 1.0);\n\n\t\t\t\t// vec3 backgroundColor = vec3( 0.125, 0.125, 0.125 );\n\t\t\t\t// vec3 color = vec3( 0.5, vvUv.x, vUv.y );\n\n\t\t\t\t// float f = texture2D( tAudioData, vec2( vUv.x, vUv.y ) ).x;\n        // float g = texture2D( tAudioData, vec2( vUv.x, 0.0 ) ).y;\n\t\t\t\t// float i = smoothstep( vUv.x, 0.0, f );\n\n\t\t\t\t// gl_FragColor = vec4( mix( backgroundColor, color, f ), 1.0 );\n  // gl_FragColor = vec4( 0.5 + vUv.x, 0.1, 0.8, 1.0 );\n\t// gl_FragColor = texture2D( u_image, vUv + tAudioData);\n\t\t// vec2 uvTrue = gl_gl_FragCoord.xy / 30. / 20.;\n    // vec2 uv = -1.0 + 2.0 * uvTrue;\n\n    // vec2 uv = gl_gl_FragCoord.xy / u_resolution;\n    // float fft = texture2D( tAudioData, vec2(uv.x * 0.25, 1.)).x;\n    // gl_FragColor = vec4(uv * pow(fft, 2.0), 0., 1.);\n\n\t\t// float lineIntensity\t;\n    // float glowWidth = 0.1;\n    // vec3 color = vec3(0.0);\n\n\t\t// for(float i = 0.0; i < 5.0; i++) {\n\t\t// \tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\n\t\t// \tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\n\t\t// \t\t\t\t\t\t\t\t\t\tglowWidth * (2.0 - sin(u_time * 0.23)),\n\t\t// \t\t\t\t\t\t\t\t\t\tglowWidth * (2.0 - cos(u_time * 0.19)));\n\t\t// }\n\n\t// for(float i = 0.0; i < 5.0; i++) {\n        \n\t// \tuv.y += (0.2 * sin(uv.x + i/7.0 - u_time * 0.6));\n  //       float Y = uv.y + getWeight(squared(i) * 20.0) *\n  //           (texture(tAudioData, vec2(uvTrue.x, 1)).x - 0.5);\n  //       lineIntensity = 0.4 + squared(1.6 * abs(mod(uvTrue.x + i / 1.3 + u_time,2.0) - 1.0));\n\t// \tglowWidth = abs(lineIntensity / (150.0 * Y));\n\t// \tcolor += vec3(glowWidth * (2.0 + sin(u_time * 0.13)),\n  //                     glowWidth * (2.0 - sin(u_time * 0.23)),\n  //                     glowWidth * (2.0 - cos(u_time * 0.19)));\n\t// }\t\n\n\t// gl_FragColor = vec4(color, 1.0);\n\n\t// vec2 c = gl_gl_FragCoord.xy / 600.;\n\t// float s = texture(tAudioData, c * .5).r;\n\t// c = vec2(0, A*s*sin((c.x*W+u_time*V)* 2.5)) + (c*2.-1.);\n\t// float g = max(abs(s/(pow(c.y, 2.1*sin(s*P))))*T,\n\t// \t\t\t  abs(.1/(c.y+E)));\n\t// gl_FragColor = vec4(g*g*s*.6, g*s*.44, g*g*.7, 1);\n\n\t// vec2 uv = vUv;\n\t// uv = abs( 2.0 * ( uv - 0.5 ) );\n\n\t// float theta = 1.0 * ( 1.0 / ( PI / 2.0 ) ) * atan( uv.x, uv.y );\n\t// float r = length( uv );\n\t// float a = 0.01 - r;\n\t// uv = vec2( theta, r );\n\n\t// vec4 t1 = texture2D( tAudioData, vec2( uv[0], 0.9 ) );\n\t// vec4 t2 = texture2D( tAudioData, vec2( uv[1], 0.9 ) );\n\t// float y = t1[3] * t2[0] * a * 1500.5;\n\t// gl_FragColor = vec4( sin( y * PI ), sin( y * PI ), sin( y * PI ), 1.0 );\n// }\n\n// vec2 hash(in vec2 p) \n// {\n//     p = vec2( dot(p,vec2(127.1,311.7)),\n// \t\t\t  dot(p,vec2(299.5,783.3)) );\n\n// \treturn -1.0 + 2.0*fract(sin(p)*43758.545);\n// }\n\n// float noise(in vec2 p) \n// {\n//     vec2 p00 = floor(p);\n//     vec2 p10 = p00 + vec2(1.0, 0.0);\n//     vec2 p01 = p00 + vec2(0.5, 1.0);\n//     vec2 p11 = p00 + vec2(1.0, 1.0);\n    \n//     vec2 s = p - p00;\n    \n//     float a = dot(hash(p00), s);\n// \tfloat b = dot(hash(p10), p - p10);\n// \tfloat c = dot(hash(p01), p - p01);\n// \tfloat d = dot(hash(p11), p - p11);\n\n//     vec2 q = s*s*s*(s*(s*6.0 - 15.0) + 10.0);\n\n//     float c1 = b - a;\n//     float c2 = c - a;\n//     float c3 = d - c - b + a;\n\n//    \treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\n// }\n\n\n// float fbm(vec2 p) \n// {\n// \tfloat h = noise(p) * texture(tAudioData, vec2(0.0, 0.0)).r;\n//     h += noise(p * 2.0) * texture(tAudioData, vec2(0.25, 0.0)).r * 0.5;\n//     h += noise(p * 4.0) * texture(tAudioData, vec2(0.50, 0.0)).r * 0.25;\n//     h += noise(p * 8.0) * texture(tAudioData, vec2(0.75, 0.0)).r * 0.125;\n    \n//     return h;\n// }\n\n// // Taken from http://iquilezles.org/www/articles/palettes/palettes.htm\n// vec3 ColorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n// {\n//     return a + b*cos( 6.28318*(c*t+d) );\n// }\n\n// vec3 ContourLines(vec2 p) \n// {\n// \tfloat h = fbm(p*5.5)*10.0;\n//     float t = fract(h);\n//     float b = 1.0 - fract(h + 1.0);\n//     return ColorPalette(h*0.1,\n//                         vec3(1.0), vec3(0.7), vec3(1.0), vec3(0.0, 0.333, 0.666)) * \n//                (pow(t, 16.0) + pow(b, 4.0));\n        \n// }\n\n// vec2 Position() \n// {\n// \treturn vec2(noise(vec2(u_time*0.014)), noise(vec2(u_time*0.012))) +\n//            vec2(0.0, u_time * 0.025);\n// }\n\n// void main()\n// {\n//   vec2 p = Position() + (gl_FragCoord.xy / max(u_resolution.x, u_resolution.y));\n// \tgl_FragColor = vec4(pow(ContourLines(p), vec3(0.55)), 1.0);\n// }\n\n//\n// Color version of: https://www.shadertoy.com/view/XlXGDf\n//\n// Based on: https://www.shadertoy.com/view/4dfSRS\n//\n\n// #define PI 3.14159\n\n// vec4 audioEq() {\n//     float vol = 0.0;\n    \n//     // bass\n//     float lows = 0.0;\n//     for(float i=0.;i<85.; i++){\n//         float v =  texture(tAudioData, vec2(i/85., 0.0)).x;\n//         lows += v*v;\n//         vol += v*v;\n//     }\n//     // lows /= 85.0;\n//     lows = sqrt(lows) * 10.;\n    \n//     // mids\n//     float mids = 0.0;\n//     for(float i=85.;i<255.; i++){\n//         float v =  texture(tAudioData, vec2(i/170., 0.0)).x;\n//         mids += v*v;\n//         vol += v*v;\n//     }\n//     // mids /= 170.0;\n//     mids = sqrt(mids) * 10.;\n    \n//     // treb\n//     float highs = 0.0;\n//     for(float i=255.;i<512.; i++){\n//         float v =  texture(tAudioData, vec2(i/255., 0.0)).x;\n//         highs += v*v;\n//         vol += v*v;\n//     }\n//     // highs /= 255.0;\n//     highs = sqrt(highs) * 10.;\n    \n//     // vol /= 512.;\n//     vol = sqrt(vol) * 10.;\n    \n//     return vec4( lows * 1.5, mids * 1.25, highs * 1.0, vol ); // bass, mids, treb, volume\n// }\n\n// void main()\n// {\n// \tvec2 uv = (vUv - 0.5) * 0.3;\n//     uv = abs( 2.05 * ( uv - 0.5 ) );\n\n//     vec4 eq = audioEq();\n// \tfloat theta = 0.5 * ( 1.0 / ( PI * 0.5 ) ) * atan( uv.x, uv.y );\n// \tfloat r = length( uv );\n// \tfloat a = 0.01 - r;\n// \tuv = vec2( theta, r );\n\n// \tfloat t1 = texture( tAudioData, vec2( uv.x, 0.9 ) ).x;\n// \tfloat t2 = texture( tAudioData, vec2( uv.y, 0.9 ) ).x;\n//   float y = t1 * t2 * a * 16.9;\n\n// \tgl_FragColor = vec4( sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       sin( y * ( 3.0 * PI ) * eq.x ), \n//                       1.0); \n// }\n\n// const int numWaves = 6;\n// const float numStripes = 1.0;\n// const float numFreqs = 8.0;\n// const float meanFreq = 5.0;\n// const float stdDev = 2.0;\n// const float period = 5.0;\n// const float pi = 4.0 * atan(1.0);\n// const float pi2 = 2.0 * pi;\n// const float ln2 = log(2.0);\n// const float mean = meanFreq * .59314718;\n\n// float wavething(int n, float x){\n//     float l = ln2 * float(n) + log(x);\n//     l -= mean;\n//     return exp(-l * l / stdDev) / 2.0;\n// }\n\n// void main()\n// {\n//     gl_FragColor = vec4(0.0);\n//     float scale = exp2(-fract(u_time / period));\n//     float sum1 = 0.0;\n//     for(int n = 0; n < int(numFreqs); n++){\n//         sum1 += wavething(n, scale);\n//     }\n//     vec2 xy = pi2 * numStripes\n//         * ((2.0 * gl_FragCoord.xy - u_resolution.xy) / u_resolution.y);\n    \n//     float sum2 = 0.0;\n//     for(int n = 0; n < numWaves; n++){\n//         float theta = pi * float(n) / float(numWaves);\n//         vec2 waveVec = vec2(cos(theta), sin(theta));\n//         float phase = dot(xy, waveVec);\n//         for(int k = 0; k < int(numFreqs); k++){\n//             sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\n//         }\n//     }\n//     gl_FragColor += vec4(1.0 - sum2 / sum1);\n//     xy /= pi2 * numStripes;\n//     float r = length(xy) * 0.35;\n//     if(sum2 / sum1 < .5){\n//         gl_FragColor.x *= 2.0;\n//         gl_FragColor.y *= texture(tAudioData, vec2(.161616 * r + .161616, .2)).x;\n//         gl_FragColor.z *= texture(tAudioData, vec2(.161616 * r + .333333, .2)).x;\n//         gl_FragColor = 1.0 - gl_FragColor;\n//     }\n//     // gl_FragColor = 1.0 - (r + 1.0) * gl_FragColor;\n//     // if(length(gl_FragColor) > 3.0) gl_FragColor = vec4(0.0);\n// }\n\n"},6644:function(t){t.exports="uniform vec2 u_resolution;  // Canvas size (width,height)\nuniform vec2 u_mouse;       // mouse position in screen pixels\nuniform float u_time;       // Time in seconds since load\nuniform sampler2D tDiffuse;\nuniform float mWidth;\nuniform float mHeight;\nuniform float smoothness;\nuniform vec3 newCol;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\n// float rand( vec2 coord ) {\n//   return fract(sin(dot(coord, vec2(56., 78.)) * 1000.0) * 1000.);\n// }\n\n// float noise( vec2 coord ) {\n//   vec2 i = floor( coord );\n//   vec2 f = fract( coord );\n\n//   float a = rand(i);\n//   float b = rand(i + vec2(1.0, 0.0));\n//   float c = rand(i + vec2(0.0, 1.0));\n//   float d = rand(i + vec2(1.0, 1.0));\n\n//   return mix(a, b, f.x ) * ( c -a ) * f.y * (1.0 - f.x ) + (d-b) * f.x * f.y;\n// }\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    \n\treturn res*res;\n}\n\nfloat circle(vec2 _st, float _radius){\n  vec2 dist = u_mouse-vUv;\n  float whRatio = u_resolution.x / u_resolution.y;\n  dist.y /= whRatio / mWidth * mHeight;\n  float percentageWidth = mWidth / u_resolution.x;\n\treturn 1. - smoothstep(percentageWidth - smoothness,\n                         percentageWidth + smoothness,\n                         dot(dist,dist)*4.0);\n}\n\nfloat fbm( vec2 coord ) {\n  int OCTAVES = 4;\n  float value = 0.0;\n  float scale = 0.3;\n\n  for (int i=0;i< OCTAVES;i++) {\n    value += noise( coord ) * scale;\n    coord *= 2.0;\n  }\n\n  return value;\n}\n\n\n\nvoid main() {\n  float whRatio = u_resolution.x / u_resolution.y;\n  float percentageWidth = mWidth / u_resolution.x;\n\n  vec4 texel = texture2D( tDiffuse, vUv );\n  vec4 m = vec4(0.1,0.2,0.3,0.1);\n\n  vec2 dist = u_mouse - vUv;\n  dist.y /= whRatio / mWidth * mHeight;\n\n  float mult = smoothstep(percentageWidth - smoothness, percentageWidth + smoothness, length( dist ));\n  // working\n  // texel.x *= ( mult * mult + newCol.x );\n  // texel.y *= ( mult * mult + newCol.y );\n  // texel.z *= ( mult * mult + newCol.z );\n\n  vec3 color = vec3(circle(vUv,0.4));\n  color.x *= newCol.x * 1.2;\n  color.y *= newCol.y * 1.2;\n  color.z *= newCol.z * 1.2;\n\n  vec2 coord = vUv * 1.2;\n  vec2 motion = vec2( fbm(coord + vec2(u_time * 1.0, u_time * -2.0 ) ) );\n  float final = fbm( coord + motion );\n\n\n  gl_FragColor = texel + vec4( color * final, 1.0 );\n  // gl_FragColor = vec4( newCol, noise(vUv * 20.));\n}"}},e={};function o(t){var i=e[t];if(void 0!==i)return i.exports;var a=e[t]={exports:{}};return n[t].call(a.exports,a,a.exports,o),a.exports}o.m=n,t=[],o.O=function(n,e,i,a){if(!e){var s=1/0;for(c=0;c<t.length;c++){e=t[c][0],i=t[c][1],a=t[c][2];for(var r=!0,l=0;l<e.length;l++)(!1&a||s>=a)&&Object.keys(o.O).every(function(t){return o.O[t](e[l])})?e.splice(l--,1):(r=!1,a<s&&(s=a));if(r){t.splice(c--,1);var u=i();void 0!==u&&(n=u)}}return n}a=a||0;for(var c=t.length;c>0&&t[c-1][2]>a;c--)t[c]=t[c-1];t[c]=[e,i,a]},o.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(n,{a:n}),n},o.d=function(t,n){for(var e in n)o.o(n,e)&&!o.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),o.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){var t;o.g.importScripts&&(t=o.g.location+"");var n=o.g.document;if(!t&&n&&(n.currentScript&&"SCRIPT"===n.currentScript.tagName.toUpperCase()&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");if(e.length)for(var i=e.length-1;i>-1&&(!t||!/^http(s?):/.test(t));)t=e[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t+"../"}(),function(){var t={524:0};o.O.j=function(n){return 0===t[n]};var n=function(n,e){var i,a,s=e[0],r=e[1],l=e[2],u=0;if(s.some(function(n){return 0!==t[n]})){for(i in r)o.o(r,i)&&(o.m[i]=r[i]);if(l)var c=l(o)}for(n&&n(e);u<s.length;u++)a=s[u],o.o(t,a)&&t[a]&&t[a][0](),t[a]=0;return o.O(c)},e=self.webpackChunkthe_district_vr=self.webpackChunkthe_district_vr||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))}();var i=o.O(void 0,[168],function(){return o(3222)});i=o.O(i)}();
//# sourceMappingURL=app.515319e1.js.map